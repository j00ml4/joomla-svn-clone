<?xml version="1.0"?>
<chapter>mvctutorial2
  <chapterinfo>
    <author>
      <firstname>Ian</firstname>

      <surname>MacLennan</surname>
    </author>

    <date>March 3, 2007</date>
  </chapterinfo>

  <title>Developing a Model-View-Controller Component - Part 2 - Adding a
  Model</title>

  <sect1>
    <title>Introduction</title>

    <para>In the first tutorial of this series, creating a simple
    view-controller component using the Joomla! 1.5 CMS framework was
    demonstrated.</para>

    <para>In the first tutorial, the greeting was hardcoded into the view.
    This doesn't follow the MVC pattern exactly because the view is intended
    to only display the data, and not contain it.</para>

    <para>In this second part of the tutorial we will demonstrate how to move
    this out of the view and into a model. In future tutorials we will
    demonstrate the power and flexibility that this design pattern
    provides.</para>
  </sect1>

  <sect1>
    <title>Creating the Model</title>

    <para>The concept of model gets its name because this class is intended to
    represent (or 'model') some entity. In our case, our first model will
    represent a 'hello', or a greeting. This is in line with our design thus
    far, because we have one view ('hello'), which is a view of our
    greeting.</para>

    <para>The naming convention for models in the Joomla! framework is that
    the class name starts with the name of the component (in our case 'hello',
    followed by 'model', followed by the model name. Therefore, our model
    class is called HelloModelHello.</para>

    <para>At this point, we will only model one behaviour of our hello, and
    that is retrieving the greeting. We will thus have one method, called
    getGreeting(). It will simply return the string 'Hello, World!'.</para>

    <para>Here is the code for our model class:</para>

    <programlisting>&lt;?php
/**
 * Hello Model for Hello World Component
 * 
 * @package    Joomla.Tutorials
 * @subpackage Components
 * @link http://dev.joomla.org/component/option,com_jd-wiki/Itemid,31/id,tutorials:modules/
 * @license    GNU/GPL
 */

// Check to ensure this file is included in Joomla!
defined('_JEXEC') or die();

jimport( 'joomla.application.component.model' );

/**
 * Hello Model
 *
 * @package    Joomla.Tutorials
 * @subpackage Components
 */
class HelloModelHello extends JModel
{
    /**
    * Gets the greeting
    * @return string The greeting to be displayed to the user
    */
    function getGreeting()
    {
        return 'Hello, World!';
    }
}</programlisting>

    <para>You will notice a line that starts with jimport. The jimport
    function is used to load files from the Joomla! framework that are
    required for our component. This particular statement will load the file
    /libraries/joomla/application/component/model.php. The '.'s are used as
    directory separators and the last part is the name of the file to load.
    All files are loaded relative to the libraries directory. This particular
    file contains the class definition for the JModel class, which is
    necessary because our model extends this class.</para>

    <para>Now that we have created our model, we must modify our view so that
    it uses it to obtain the greeting.</para>
  </sect1>

  <sect1>
    <title>Using the Model</title>

    <para>The Joomla! framework is setup in such a way that the controller
    will automatically load the model that has the same name as the view and
    will push it into the view. Since our view is called 'Hello', our 'Hello'
    model will automatically be loaded and pushed into the view. Therefore, we
    can easily retrieve a reference to our model using the JView::getModel()
    method.</para>

    <para>Our previous view code contained the lines:</para>

    <programlisting>$greeting = "Hello World!";</programlisting>

    <para>To take advantage of our model, we change this line to:</para>

    <programlisting>$model =&amp; $this-&gt;getModel();
$greeting = $model-&gt;getGreeting();</programlisting>

    <para>The complete view now looks like:</para>

    <programlisting>&lt;?php

/**
 * Hello View for Hello World Component
 * 
 * @package    Joomla.Tutorials
 * @subpackage Components
 * @link http://dev.joomla.org/component/option,com_jd-wiki/Itemid,31/id,tutorials:modules/
 * @license    GNU/GPL
 */

// no direct access

defined( '_JEXEC' ) or die( 'Restricted access' );

jimport( 'joomla.application.component.view');

/**
 * HTML View class for the HelloWorld Component
 *
 * @package    Joomla.Tutorials
 * @subpackage Components
 */

class HelloViewHello extends JView
{
    function display($tpl = null)
    {
        $model =&amp; $this-&gt;getModel();
        $greeting = $model-&gt;getGreeting();
        $this-&gt;assignRef( 'greeting',	$greeting );

        parent::display($tpl);
    }
}
?&gt;</programlisting>

    <sect2>
      <title>Adding the File to the Package</title>

      <para>All that remains is to add an entry to the XML file so that our
      new model will be copied. The Joomla! framework will look for our model
      in the models directory, so the entry for this file will look like (it
      should be added to the site section):</para>

      <programlisting>&lt;filename&gt;models/hello.php&lt;/filename&gt;</programlisting>

      <para>Our new hello.xml file will look like:</para>

      <programlisting>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE install SYSTEM "http://dev.joomla.org/xml/1.5/component-install.dtd"&gt;
&lt;install type="component" version="1.5.0"&gt;
	&lt;name&gt;Hello&lt;/name&gt;
    &lt;!-- The following elements are optional and free of formatting conttraints --&gt;
    &lt;creationDate&gt;2007 02 22&lt;/creationDate&gt;
    &lt;author&gt;John Doe&lt;/author&gt;
    &lt;authorEmail&gt;john.doe@example.org&lt;/authorEmail&gt;
    &lt;authorUrl&gt;http://www.example.org&lt;/authorUrl&gt;
    &lt;copyright&gt;Copyright Info&lt;/copyright&gt;
    &lt;license&gt;License Info&lt;/license&gt;
    &lt;!--  The version string is recorded in the components table --&gt;
    &lt;version&gt;Component Version String&lt;/version&gt;
    &lt;!-- The description is optional and defaults to the name --&gt;
    &lt;description&gt;Description of the component ...&lt;/description&gt;

    &lt;!-- Site Main File Copy Section --&gt;
    &lt;files folder="site"&gt;
        &lt;filename&gt;index.html&lt;/filename&gt;
        &lt;filename&gt;hello.php&lt;/filename&gt;
        &lt;filename&gt;controller.php&lt;/filename&gt;
        &lt;filename&gt;views/index.html&lt;/filename&gt;
        &lt;filename&gt;views/hello/index.html&lt;/filename&gt;
        &lt;filename&gt;views/hello/view.html.php&lt;/filename&gt;
        &lt;filename&gt;views/hello/tmpl/index.html&lt;/filename&gt;
        &lt;filename&gt;views/hello/tmpl/default.php&lt;/filename&gt;
        &lt;filename&gt;models/index.html&lt;/filename&gt;
        &lt;filename&gt;models/hello.php&lt;/filename&gt;
    &lt;/files&gt;
    
    &lt;administration&gt;
        &lt;!-- Administration Menu Section --&gt;
        &lt;menu&gt;Hello World!&lt;/menu&gt;
        
        &lt;!-- Administration Main File Copy Section --&gt;
        &lt;!-- Note the folder attribute: This attribute describes the folder
            to copy FROM in the package to install therefore files copied
            in this section are copied from /admin/ in the package --&gt;
        &lt;files folder="admin"&gt;
    &lt;!-- Site Main File Copy Section --&gt;
            &lt;filename&gt;index.html&lt;/filename&gt;
            &lt;filename&gt;admin.hello.php&lt;/filename&gt;
        &lt;/files&gt;        
    &lt;/administration&gt;
&lt;/install&gt;</programlisting>
    </sect2>
  </sect1>

  <sect1>
    <title>Conclusion</title>

    <para>We now have a simple MVC component. Each element is very simple at
    this point, but provides a great deal of flexibility and power.</para>
  </sect1>

  <sect1>
    <title>Contributors</title>

    <simplelist>
      <member>staalanden</member>
    </simplelist>
  </sect1>

  <sect1>
    <title>Download</title>

    <para>The component can be downloaded at: <ulink>packages/com_hello2.zipcom_hello2.zip</ulink></para>
  </sect1>
</chapter>
