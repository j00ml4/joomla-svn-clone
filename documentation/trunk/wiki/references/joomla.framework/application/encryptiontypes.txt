====== Password Encryption Types [WIP] ======
The JAuthenticateHelper class provides an interface to a variety of encryption methods. This page contains an overview of each method and includes basic information about the encryption algorithm and how the salt is generated. The encryption type names are the strings that should be used with the [[jauthenticatehelper#getcryptedpassword|JAuthenticateHelper::getCryptedPassword]] and [[jauthenticatehelper#getsalt|JAuthenticateHelper::getSalt]] methods.

===== Encryption Methods =====

==== plain ====
The plain encryption type, as its name implies, performs no encryption. The plain text password that was passed to the function is returned.

==== sha ====
This is sha1 encryption. SHA-1 uses 160 bit encryption. This is a very common type of encryption and is used by many industry standard encryption protocols. The maximum message size is 2<sup>64</sup> bits. A salt is not used in this algorithm. The system must have the [[http://mhash.sourceforge.net/|Mhash]] library installed.

For more information, see http://en.wikipedia.org/wiki/SHA1.

==== crypt, crypt-des, crypt-md5, crypt-blowfish ====
This uses the PHP [[http://php.net/manual/function.crypt.php|crypt function]] to encrypt the specified password. This generally uses the standard Unix DES-based encryption algorithm.

The salts are generated using the following code:
  * crypt - The salt is the first two characters of the seed that is passed. If no seed is passed, the generated salt is generated by: substr(md5(mt_rand()), 0, 2).
  * crypt-des - The salt is the first two characters of the seed that is passed. If no seed is passed, the generated salt is generated by: substr(md5(mt_rand()), 0, 2).
  * crypt-md5 - The salt is the first 12 characters of the seed that is passed. If no seed is passed, the salt is generated by: '$1$'.substr(md5(mt_rand()), 0, 8).'$'.
  * crypt-blowfish - The salt is the first 16 characters of the seed that is passed. If no seed is passed, the salt is generated by: '$2$'.substr(md5(mt_rand()), 0, 12).'$'.

==== md5-base64 ====
This uses the MD5 encryption algorithm and returns the value using base64 encoding. MD5 (Message-Digest algorithm 5) is a widely-used cryptographic hash function with a 128-bit hash value. This algorithm does not use a salt.

The system must have the [[http://mhash.sourceforge.net/|Mhash]] library installed.

For more information, see http://en.wikipedia.org/wiki/Md5.

==== ssha ====
This also uses [[#sha|sha1]] encryption, but this method uses a salt. The salt is the last 20 characters of the supplied seed. If no seed is passed, the seed is generated using: 
 mhash_keygen_s2k(MHASH_SHA1, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4). 

The system must have the [[http://mhash.sourceforge.net/|Mhash]] library installed.

For more information, see http://en.wikipedia.org/wiki/SHA1.

==== smd5 ====
This also uses [[#md5|md5]] encryption, but this method uses a salt. The salt is the last 16 characters of the supplied seed. If no seed is passed, the seed is generated using: mhash_keygen_s2k(MHASH_MD5, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4). 

The system must have the [[http://mhash.sourceforge.net/|Mhash]] library installed.

For more information, see http://en.wikipedia.org/wiki/Md5.

==== aprmd5 ====
This uses aprmd5 encryption. The salt is the first eight characters of the seed that is passed. If no seed is passed, the salt is an eight character long random sequence of uppercase and lowercase letters and numbers.

==== md5-hex ====
This uses the MD5 encryption algorithm and returns the value using hex encoding. MD5 (Message-Digest algorithm 5) is a widely-used cryptographic hash function with a 128-bit hash value. This algorithm does not use a salt.

The system must have the [[http://mhash.sourceforge.net/|Mhash]] library installed.

For more information, see http://en.wikipedia.org/wiki/Md5.