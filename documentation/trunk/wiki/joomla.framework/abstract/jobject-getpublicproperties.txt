====== getPublicProperties ======
^ API ^ Package ^ Class ^ phpDocumentor ^ Last reviewed ^ Doc status ^
| [[references:Joomla.Framework|{{http://api.joomla.org/media/images/package.png }}]] [[references:Joomla-Framework|Joomla-Framework]] | [[|{{http://api.joomla.org/media/images/package.png }}]] [[references:Joomla-Framework#Abstract|Abstract]] | [[JObject|{{http://api.joomla.org/media/images/Class.png }}]][[JObject|JObject]] | [[http://api.joomla.org/Joomla-Framework/Abstract/JObject.html|JObject->getPublicProperties]] | never | Work in progress |

This function returns an array of public property names.

===== Syntax =====
array getPublicProperties ($assoc = false)

===== Examples =====
<code php|Example>
jimport( 'joomla.application.search' );
$search =& new JSearch();

print_r( $search->getPublicProperties() );
</code>
might produce:
<code php|Result>
Array
(
    [0] => text
    [1] => ordering
    [2] => matchType
    [3] => limitstart
    [4] => limit
    [5] => count
    [6] => results
)
</code>

If you provide ''true'' as the value for the optional argument '''$assoc''', this method will return an associative array (hash) with all private properties removed from the output.

<code php|Example 2>
$myobj = new JObject();
$myobj->set('name', 'Anonymous');
$myobj->set('version', '1.0');
$myobj->set('_secret', '4711');

print_r( $myobj->getPublicProperties(true) );
// type casting to array (PHP way)
print_r( (array)$myobj );
</code>
will produce:
<code php|Result 2>
Array
(
    [name] => Anonymous
    [version] => 1.0
)

Array
(
    [name] => Anonymous
    [version] => 1.0
    [_secret] => 4711
)
</code>

----

~~DISCUSSION~~
