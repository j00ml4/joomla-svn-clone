

		********************************************
		*   THIS IS AN EXPERIMENTAL RELEASE !      *
		* DO NOT USE THIS ON A PRODUCTION SERVER ! *
		********************************************


JAPI is a helper plugin for the API Wiki @ dev.joomla.org

The plugin has been tested with the default installation of OpenWiki 1.1.0
(aka JD-Wiki) on Joomla 1.0.12 running PHP 4.4.x + PHP 5.1.x / WinXP SP2 /
Apache 2.0.55


Prerequisites:
---------------------------------------
The rendering routines expect the Wiki $format to be configured as "xhtml".
Other formats have not been tested, and I have no idea whether "xhtml" is
the default 'Doku_Renderer' or not. If the renderer object is not 'xhtml'
the plugin die()s with an error message:

	The JAPI plugin requires the "xhtml" renderer!

Purpose:
---------------------------------------
The plugin provides a new tag to create the documentation header for the
API reference pages available via this nice looking URL:
http://dev.joomla.org/component/option,com_jd-wiki/Itemid,/id,references:joomla.framework/

	{#JAPI params ... #}

The following parameters are available and must be provided in the same order
as denoted here. Trailing parameters can be left out and will be replaced by
defaults where applicable. The tag cannot be empty, ie {#JAPI#} would do
nothing except waisting some CPU cycles.

All parameters must be separated by a white-space character.

{#JAPI PackageName SubpackageName Subject ReviewDate DocStatusCode#}

- PackageName:
	The @package the class/method belongs to

	Example: Joomla.Framework

- SubpackageName:
	The @subpackage the class/method belongs to

	Example: Environment

- Subject:
	The class &| method being documented.
	It takes three forms:
	- ClassName
		The Class being documented
		Example: JRequest
OR
	- ClassName::methodName
		The method of a Class being documented. The names MUST be
		separated with T_PAAMAYIM_NEKUDOTAYIM aka double colons, ::
		Parenthesis for the method are not required and will be removed.

		Example: JRequest::getVar
OR
	- ::functionName
		A GLOBAL function that is not part of a class, i.e.
		the J! 1.0 legacy functions.

		Example: ::jimport

- ReviewDate (optional)
	The date of the last document revision provided in ISO format
	and ISO format only: YYYY-MM-DD
	If this parameter is ommitted, the string 'Never' will be used
	as a default.

	Example: 2007-07-27

- DocStatusCode (optional)
	The document status code. Valid entries are:
	- WIP   for  Work in progress
	- IR    for  Internal review
	- PR    for  Public review
	- FIN   for  Final
	If this parameter is ommitted/invalid, the value 'WIP'
	will be used as the default.

	Example: RP


Knows issues + limitations
---------------------------------------

phpDocumentor URLs (api.joomla.org) may be broken for global functions.
There's no way to safely identify the file a global function belongs
to. As of Joomla! 1.5 beta 2 the only global function in the Framework
appears to be jimport()
The target URI is derived from the available parameters. The plugin
may fail under certain conditions such as the location of a global
function and bogous Package/Subpackage names. Whilst phpDoc uses
the physical filepath of a function's source file, the @package
and @subpackage names may speak a different language and JAPI may
take the wrong track.
As an attempt to solve this issue, an experimental "hints.php" file is 
included in the folder which lists known files, classes, and such that 
do not follow the general naming scheme of the Joomla! 1.5 framework 
for whatever reason.

All icons are loaded from api.joomla.org. It'd be nice if we can
have a copy in the *local* Wiki media folder. Should this happen,
the JApiHelper::$_icon_uri property needs to be adjusted.


Installation:
---------------------------------------
Again: THIS IS AN EXPERIMENTAL RELEASE. 
Only try this "at home" OR on a non-public server.

Copy the entire /japi/ folder to ./plugins/japi/ folder of the 
Joomla! Wiki component, e.g.
	/components/com_openwiki/lib/plugins/japi
or
	/components/com_jd-wiki/lib/plugins/japi

	** REMOVE `.htaccess` and `test.php` from the destination 
		folder if do not want to run the test file, which 
		requires PHP5 by the way.

An example file "japi-plugin.txt" to demonstrate the features is
include in this folder. Simply copy this file to the 'references'
folder of DocuWiki and navigate to
    /bla,bla,bla/id,references:japi-plugin/

You may want to add this somewhere to your local Wiki /start.txt document:
  * [[references:japi-plugin|JAPI Plugin]]
  * [[references:jref-plugin|JREF Plugin]]

Please report all trouble or praise in this forum:
	http://forum.joomla.org/index.php/board,61.0.html


History:
---------------------------------------
 0.2 1 implemented phpDoc URI stuff
 0.2.0 refactored to use OO paradigms, should make the Plugin "highly" extensible ;)
 0.1.0 internal release

Have fun,

CirTap

Todo:
---------------------------------------
 - drop fancy code for legacy code detection in cls, meth, func helpers
 - make some of the various hardcoded properties configurable
   - URIs, column order in JApiHelper
   - JApiHelperSub::$format
   - JApiHelperEntry::$schema
 - JApiHelperSub: harden Subpackage index page location (URL)
   check/decide whether we use:
  		- /package/#subpackage
  		- /subpackage/index.txt
  		- /subpackage/subpackage.txt
 - JREF: implement suppt. for constants declared in class files and
 	link to the appropriate page on the API site

Nice to have:
 - l10n ? JApiHelperRev, JApiHelperStat, column headers
 - different layouts: vertical, horizontal, list


References:
---------------------------------------
http://projects.j-prosolution.com/projects/os-projects/project-openwiki.html


Copyright (c)2007 Rene Serradeil
License   CC-SA-NC Creative Commons Share Alike Non Commercial
