====== JApi Plugin ======
The JApi Plugin was designed to simplify writing the API documentation for the Joomla! 1.5 Framework and to create links to the associated resources such as the phpDocumentor API reference available at http://api.joomla.org.

The plugin provides two new tags for use with DokuWiki aka JD-Wiki:
  * ''%%{#JAPI#}%%'' -- to create the API tables at the top of each page
  * ''%%{#JREF#}%%'' -- to create links between reference pages.

So instead of writing something like this:
  ^ API ^ Package ^ phpDocumentor ^ Last reviewed ^ Doc status ^
  | {{http://api.joomla.org/media/images/package.png?nolink}} [[references:joomla.framework|Joomla.Framework]] | {{http://api.joomla.org/media/images/package.png?nolink}} [[references:joomla.framework/#Environment|Environment]] | [[http://api.joomla.org/Joomla.Framework/Environment/JBrowser.html|JBrowser]] | Never | Work in progress |

You write:
  {#JAPI Joomla.Framework Environment JBrowser#}

Finally, wiki syntax has become easy again ;)


===== {#JAPI#} =====
This tag creates an //API Reference Table//.
These tables appear at the top of each reference document and contain an arbitrary amount of columns based on the documented subject with links pointing to related API documents. For example, if the subject is a class' member method, there will be links to the method's parent class, the class package, and a link to the API reference page of that method at the api.joomla.org website.
The table also includes two "informal" fields: //Revision Date// and //Document Status//, which are modified by the author if the document is being revised. Their values default to ''Never'' and ''Work in progress'' respectively, which is usually true for new documents.

==== Syntax ====
The fully fledged syntax of the %%{#JAPI#}%% tag looks like this:
  {#JAPI Package.Name Subpackage ClassName::methodName 2007-07-27 PR #}

You're not required to provide every single parameter, but they **must** appear in the specified order as denoted in the next section.
The %%{#JAPI#}%% tag cannot be empty, e.g. ''%%{#JAPI#}%%'' would do plain nothing except having PHP waste a couple of CPU cycles on the webserver machine.

==== Parameters ====
The following parameters are supported.
  {#JAPI PackageName SubpackageName Subject ReviewDate DocStatusCode#}
All parameters must be separated by a white-space character, that is: a space, tab, or a line-feed.

You may however skip a column, i.e. if the document's subject is a global function that does not belong to a subpackage. Simply add a hyphen (''-'') in place of the Subpackage name for that column to be ommited from the output.

%%{#JAPI#}%% will use the ''references'' namespace of the Wiki to create internal links and will also default to ''Joomla.Framework'' as the package name if none is provided: ''%%[[references:joomla.framework]]%%''.
These defaults, among other settings, are available as private properties to the plugin renderer class. A future version of the plugin may provide an external config file to edit these defaults w/o modifying the PHP code.

=== PackageName ===
The @package the subject belongs to
  Example: Joomla.Framework

=== SubpackageName ===
The @subpackage the subject belongs to
  Example: Environment

=== Subject ===
The class, method, or function that's documented.
This parameter comes in three syntax flavours:
  * ''ClassName'' -- The Class being documented
  * ''ClassName::methodName'' -- The method of a Class being documented. The names MUST be separated with double colons ''::'' aka "T_PAAMAYIM_NEKUDOTAYIM". Parenthesis are not required and will be removed.
  * ''::functionName'' -- A global function which is not part of a class.
  Example: JRequest
  Example: JRequest::getVar
  Example: ::jimport

Since there's no safe way for the plugin to //predict// whether a single string like "mosLoadModules" is the name of a class or a function, you **must** provide a "hint" by preceeding the name of such global functions with two colons.

=== ReviewDate (optional) ===
The date of the most recent document revision provided in ISO format: ''YYYY-MM-DD''.
If this parameter is ommitted/skipped, the word "''Never''" will be used.
If the date is invalid, the word "''Unknown''" will be used.
	Example: 2007-07-27
The output will be formatted using Joomla!s date formatter (mosFormatDate, JHTML::date).

=== DocStatusCode (optional) ===
The document status //code//. If this parameter is ommitted, skipped, or invalid, it defaults to ''WIP''.
Valid codes are:
  * ''WIP'' -- "Work in progress" (default)
  * ''IR''  -- "Internal review"
  * ''PR''  -- "Public review"
  * ''FIN'' -- "Final"
	Example: IR


==== White space ====
The amount of whitespace //between// parameters is insignificant. If the following is good for you, it's fine for the plugin
  {#JAPI
  	Joomla.Framework
  	Environment
  	JBrowser::match    #}
and will produce:
{#JAPI
	Joomla.Framework
	Environment
	JBrowser::match    #}

===== Examples =====
In the following examples an extra space was added after the last parameter for easier reading.

**Drop columns**\\
  {#JAPI Joomla.Framework - ::jimport - IR #}
{#JAPI Joomla.Framework - ::jimport - IR #}
In this example the first hyphen will remove the //Subpackage// column, whereas the second hyphen, aimed to remove the //Revision date// as well, will actually force the default value ''Never'' to be used.

  {#JAPI Joomla.Legacy - ::mosMambotHandler - FIN #}
{#JAPI Joomla.Legacy - ::mosMambotHandler - FIN #}
This attempt to "drop" the Subpackage column for a //Legacy// function will be rejected but default to ''1.5''.
Both examples also demonstrate how you would create the headers for a **global function**, such as the many from the ''Joomla.Legacy'' package. Simply put: don't provide a //classname// but preceed the function name with the famous [[http://www.php.net/manual/keyword.paamayim-nekudotayim.php|T_PAAMAYIM_NEKUDOTAYIM]].
The shortcuts ''IR'' and ''FIN'' are expanded to the document status //Internal review// and //Final// respectively.


**Plain simple**\\
Any of the following will output the same:
  {#JAPI Joomla.Framework #}
  {#JAPI - #}
  {#JAPI - - - - - #}
{#JAPI Joomla.Framework #}
This last example was added in case you wanted to know ... <g>

**Setting a Revision Date**\\
You may need to skip a few columns in order to set the revision date:
  {#JAPI Joomla.Framework - - 2007-07-27 #}
{#JAPI Joomla.Framework 2007-07-27 #}
You're right; not very convenient.\\How 'bout this:
  {#JAPI Joomla.Framework 2007-07-27 #}
{#JAPI Joomla.Framework 2007-07-27 #}
In fact you may provide the //revision date// right after any parameter, **but** it must only be followed by a document status code. This one will not give you what you might have intended:
  {#JAPI Joomla.Framework 2007-07-27 Base #}
{#JAPI Joomla.Framework 2007-07-27 Base #}
Because ''Base'' is an invalid "Document status", the default ''WIP'' is used.

  {#JAPI Joomla.Framework Base JObject:: #}
{#JAPI Joomla.Framework Base JObject:: #}
This example depicts another convenient shortcut to document the ''%%__constructor%%'' method of a class.

  {#JAPI Joomla.Framework Application JEventDispatcher::trigger 2007-07-27 RP #}
{#JAPI Joomla.Framework Application JEventDispatcher::trigger 2007-07-27 PR #}


==== Document Status ====
This column currently accepts four values, or abbreviations, to be exact:
  * ''WIP'' will expand to "Work in progress"
  * ''IR''  will expand to "Internal review"
  * ''PR''  will expand to "Public review"
  * ''FIN'' will expand to "Final"
Any other string will default to ''WIP'', thus you cannot "invent" a new document status w/o telling the plugin it exists.


----

~~DISCUSSION~~

