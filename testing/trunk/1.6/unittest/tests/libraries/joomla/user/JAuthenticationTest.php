<?php
/**
 * JAuthenticationTest.php -- unit testing file for JAuthentication
 *
 * @version		$Id: $
 * @package    Joomla.UnitTest
 * @copyright	Copyright (C) 2005 - 2009 Open Source Matters. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 */
require_once 'PHPUnit/Framework.php';
require_once JPATH_BASE . '/libraries/joomla/event/dispatcher.php';
require_once JPATH_BASE . '/libraries/joomla/user/authentication.php';

/**
 * Test class for JAuthentication.
 * Generated by PHPUnit on 2009-10-26 at 22:45:21.
 *
 * @package    Joomla.UnitTest
 * @subpackage User
 */
class JAuthenticationTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var JAuthentication
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        //$this->object = new JAuthentication;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
    }

    /**
     * Testing GetInstance().
     *
     * @return void
     */
    public function testGetInstance()
    {
    	include_once JPATH_BASE . '/libraries/joomla/plugin/helper.php';
    	include_once JPATH_BASE . '/libraries/joomla/user/user.php';
    	
		$user = new JUser;
		
    	$mockSession = $this->getMock('JSession');
    	$mockSession->expects($this->any())->method('get')->with($this->equalTo('user'))->will(
    		$this->returnValue($user)
    	);
    	JFactory::$session = $mockSession;

    	$instance1 = JAuthentication::getInstance();
    	$error = JError::getError();
    	$this->assertThat(
    		$error,
    		$this->equalTo(null)
    	);

    	$instance2 = JAuthentication::getInstance();
    	$error = JError::getError();
    	$this->assertThat(
    		$error,
    		$this->equalTo(null)
    	);

		$this->assertThat(
			$instance1,
			$this->equalTo($instance2)
		);
    }

    /**
     * Testing authenticate
     *
     * @return void
     * @todo Implement testAuthenticate().
     */
    public function testAuthenticate()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
        	'This test has not been implemented yet.'
        );
    }

    /**
     * Testing the response creation
     *
     * @return void
     */
    public function testAuthenticationResponse()
    {
    	$response = new JAuthenticationResponse;
    	
        $this->assertThat(
        	$response,
        	$this->isInstanceOf('JAuthenticationResponse')
        );
    }
}
?>
