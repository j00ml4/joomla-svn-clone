<?php
/**
 * JUtilitiesTest.php -- unit testing file for JUtilities
 *
 * @version		$Id: $
 * @package    Joomla.UnitTest
 * @copyright	Copyright (C) 2005 - 2009 Open Source Matters. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 */
require_once 'PHPUnit/Framework.php';
require_once JPATH_BASE . '/libraries/joomla/utilities/utility.php';
/**
 * Test class for JUtility.
 * Generated by PHPUnit on 2009-10-26 at 22:28:32.
 *
 * @package    Joomla.UnitTest
 * @subpackage Utilities
 */
class JUtilityTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var JUtility
     */
    protected $object;

    /**
     * @var factoryState
     */
    protected $factoryState = array();

	/**
	 * Saves the Factory pointers
	 *
	 * @return void
	 */
	protected function saveFactoryState()
	{
		$this->factoryState['application'] = JFactory::$application;
		$this->factoryState['config'] = JFactory::$config;
		$this->factoryState['session'] = JFactory::$session;
		$this->factoryState['language'] = JFactory::$language;
		$this->factoryState['document'] = JFactory::$document;
		$this->factoryState['acl'] = JFactory::$acl;
		$this->factoryState['database'] = JFactory::$database;
		$this->factoryState['mailer'] = JFactory::$mailer;
	}

	/**
	 * Saves the Factory pointers
	 *
	 * @return void
	 */
	protected function restoreFactoryState()
	{
		JFactory::$application = $this->factoryState['application'];
		JFactory::$config = $this->factoryState['config'];
		JFactory::$session = $this->factoryState['session'];
		JFactory::$language = $this->factoryState['language'];
		JFactory::$document = $this->factoryState['document'];
		JFactory::$acl = $this->factoryState['acl'];
		JFactory::$database = $this->factoryState['database'];
		JFactory::$mailer = $this->factoryState['mailer'];
	}

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
    	$this->saveFactoryState();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
    	$this->restoreFactoryState();
    }

	/**
	 *	Test cases for sendMail
	 *
	 * @return array
	 */
	function casesSendMail()
	{
		return array(
			'simple' => array(
				array(
					'from' => "test",
					'fromname' => 'Test Name',
					'recipient' => 'Test Recip',
					'subject' => 'Test Subject',
					'body' => "This is the body of the message",
					'mode' => 'Test Mode',
					'cc' => 'Test CC',
					'bcc' => 'Test BCC',
					'attachment' => 'Test att',
					'replyto' => 'test replyto',
					'replytoname' => 'test replytoname',
				),
				array(
					'from' => "test",
					'fromname' => 'Test Name',
					'recipient' => 'Test Recip',
					'subject' => 'Test Subject',
					'body' => "This is the body of the message",
					'mode' => 'Test Mode',
					'cc' => 'Test CC',
					'bcc' => 'Test BCC',
					'attachment' => 'Test att',
					'replyto' => 'test replyto',
					'replytoname' => 'test replytoname',
				),
				true,
			),
			'failure' => array(
				array(
					'from' => "test",
					'fromname' => 'Test Name',
					'recipient' => 'Test Recip',
					'subject' => 'Test Subject',
					'body' => "This is the body of the message",
					'mode' => 'Test Mode',
					'cc' => 'Test CC',
					'bcc' => 'Test BCC',
					'attachment' => 'Test att',
					'replyto' => 'test replyto',
					'replytoname' => 'test replytoname',
				),
				array(
					'from' => "test",
					'fromname' => 'Test Name',
					'recipient' => 'Test Recip',
					'subject' => 'Test Subject',
					'body' => "This is the body of the message",
					'mode' => 'Test Mode',
					'cc' => 'Test CC',
					'bcc' => 'Test BCC',
					'attachment' => 'Test att',
					'replyto' => 'test replyto',
					'replytoname' => 'test replytoname',
				),
				false,
			),
		);
	}

    /**
     * Testing sendMail().
     *
     * @param	array	Input arguments for array
     * @param	array	Arguments received by array
     * @param	bool	Expected result of method call
     *
     * @return void
     * @dataProvider casesSendMail
     */
    public function testSendMail( $args, $expectedArgs, $expResult )
    {
    	$mockMailer = $this->getMock('JMail', array('sendMail'));
    	$mockMailer->expects($this->once())->method('sendMail')->with(
    		$this->equalTo($expectedArgs['from']), $this->equalTo($expectedArgs['fromname']),
    	    $this->equalTo($expectedArgs['recipient']), $this->equalTo($expectedArgs['subject']),
    	    $this->equalTo($expectedArgs['body']), $this->equalTo($expectedArgs['mode']),
    	    $this->equalTo($expectedArgs['cc']), $this->equalTo($expectedArgs['bcc']),
    	    $this->equalTo($expectedArgs['attachment']), $this->equalTo($expectedArgs['replyto']),
    	    $this->equalTo($expectedArgs['replytoname'])
    	)->will($this->returnValue($expResult));
    	JFactory::$mailer = $mockMailer;

		$this->assertThat(
			JUtility::sendMail(
				$args['from'], $args['fromname'], $args['recipient'],
				$args['subject'], $args['body'], $args['mode'], $args['cc'], $args['bcc'],
				$args['attachment'], $args['replyto'], $args['replytoname']
			),
			$this->equalTo($expResult)
		);
    }

	/**
	 *	Test cases for sendAdminMail
	 *
	 * @return array
	 */
	function casesSendAdminMail()
	{
		return array(
			'simple' => array(
				array(
					'adminName' => "test",
					'adminEmail' => 'Test Name',
					'email' => 'Test Recip',
					'type' => 'Test Subject',
					'title' => "This is the body of the message",
					'author' => 'Test Mode',
					'url' => 'Test CC',
				),
				array(
					'adminName' => "test",
					'adminEmail' => 'Test Name',
					'email' => 'Test Recip',
					'type' => 'Test Subject',
					'title' => "This is the body of the message",
					'author' => 'Test Mode',
					'url' => 'Test CC',
				),
				true,
			),
			'failure' => array(
				array(
					'adminName' => "test",
					'adminEmail' => 'Test Name',
					'email' => 'Test Recip',
					'type' => 'Test Subject',
					'title' => "This is the body of the message",
					'author' => 'Test Mode',
					'url' => 'Test CC',
				),
				array(
					'adminName' => "test",
					'adminEmail' => 'Test Name',
					'email' => 'Test Recip',
					'type' => 'Test Subject',
					'title' => "This is the body of the message",
					'author' => 'Test Mode',
					'url' => 'Test CC',
				),
				false,
			),
		);
	}

    /**
     * Testing sendAdminMail().
     *
     * @param	array	Arguments for method call
     * @param	array	Arguments received by method
     * @param	bool	Expected return from call
     *
     * @return void
     *
     * @dataProvider casesSendAdminMail
     */
    public function testSendAdminMail( $args, $expectedArgs, $expResult )
    {
    	$mockMailer = $this->getMock('JMail', array('sendMail'));
    	$mockMailer->expects($this->once())->method('sendMail')->with(
    		$this->equalTo($expectedArgs['adminName']), $this->equalTo($expectedArgs['adminEmail']),
			$this->equalTo($expectedArgs['email']), $this->equalTo($expectedArgs['type']),
    	    $this->equalTo($expectedArgs['title']), $this->equalTo($expectedArgs['author']),
    	    $this->equalTo($expectedArgs['url'])
    	)->will($this->returnValue($expResult));
    	JFactory::$mailer = $mockMailer;

		$this->assertThat(
			JUtility::sendMail(
				$args['adminName'], $args['adminEmail'], $args['email'],
				$args['type'], $args['title'], $args['author'], $args['url']
			),
			$this->equalTo($expResult)
		);
    }

    /**
     * Testing getHash().
     *
     * @return void
     */
    public function testGetHash()
    {
    	$expResult = MD5("This is a test");
    	$mockApplication = $this->getMock('JAplication', array('getHash'));
    	$mockApplication->expects($this->once())->method('getHash')->will(
    		$this->returnValue($expResult)
    	);
    	JFactory::$application = $mockApplication;

    	$this->assertThat(
    		JUtility::getHash('Test'),
    		$this->equalTo($expResult)
    	);
    }

	/**
	 *	Test cases for getToken
	 *
	 * @return array
	 */
	function casesToken()
	{
		return array(
			'default' => array(
				null,
				false,
			),
			'false' => array(
				false,
				false,
			),
			'true' => array(
				true,
				true,
			),
		);
	}
    /**
     * Testing getToken().
     *
     * @param	bool	Input to getToken call
     * @param	bool	Expected results from getToken
     *
     * @return void
     *
     * @dataProvider casesToken
     */
    public function testGetToken( $data, $expResult )
    {
    	$mockSession = $this->getMock('JSession', array('getFormToken'));
    	$mockSession->expects($this->once())->method('getFormToken')->will(
    		$this->returnValue($expResult)
    	);
    	JFactory::$session = $mockSession;

    	$this->assertThat(
    		is_null($data)?JUtility::getToken():JUtility::getToken($data),
    		$this->equalTo($expResult)
    	);
    }

    /**
     * Test parseAttributes
     *
     * @return void
     *
     * @todo Implement testParseAttributes().
     */
    public function testParseAttributes()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
        	'This test has not been implemented yet.'
        );
    }

	/**
	 *	Test cases for isWinOS
	 *
	 * @return array
	 */
	function casesWinOS()
	{
		return array(
			'false' => array(
				false,
			),
			'true' => array(
				true,
			),
		);
	}

    /**
     * Testing isWinOS().
     *
     * @param	bool	return value from mock
     *
     * @return	void
     *
     * @dataProvider casesWinOS
     */
    public function testIsWinOS( $expResult )
    {
    	$mockApplication = $this->getMock('JAplication', array('isWinOS'));
    	$mockApplication->expects($this->once())->method('isWinOS')->will(
    		$this->returnValue($expResult)
    	);
    	JFactory::$application = $mockApplication;

    	$this->assertThat(
    		JUtility::isWinOS(),
    		$this->equalTo($expResult)
    	);
    }

    /**
     * Test dump
     *
     * @return void
     * @todo Implement testDump().
     */
    public function testDump()
    {
        // Remove the following lines when you implement this test.
        $this->markTestSkipped(
        	'This function is deprecated.'
        );
    }

    /**
     * Test array_unshift_ref
     *
     * @return void
     * @todo Implement testArray_unshift_ref().
     */
    public function testArrayUnshiftRef()
    {
        // Remove the following lines when you implement this test.
        $this->markTestSkipped(
        	'This function is deprecated.'
        );
    }

    /**
     * Test return_bytes
     *
     * @return void
     * @todo Implement testReturn_bytes().
     */
    public function testReturnBytes()
    {
        // Remove the following lines when you implement this test.
        $this->markTestSkipped(
        	'This function is deprecated.'
        );
    }
}
?>
