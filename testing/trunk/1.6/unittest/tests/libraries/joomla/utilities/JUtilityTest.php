<?php
/**
 * JUtilitiesTest.php -- unit testing file for JUtilities
 *
 * @version		$Id: $
 * @package    Joomla.UnitTest
 * @copyright	Copyright (C) 2005 - 2009 Open Source Matters. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 */
require_once 'PHPUnit/Framework.php';
require_once JPATH_BASE . '/libraries/joomla/application/application.php';
require_once JPATH_BASE . '/libraries/joomla/utilities/utility.php';
/**
 * Test class for JUtility.
 * Generated by PHPUnit on 2009-10-26 at 22:28:32.
 *
 * @package    Joomla.UnitTest
 * @subpackage Utilities
 *
 */
class JUtilityTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var JUtility
     */
    protected $object;

    /**
     * @var factoryState
     */
    protected $factoryState = array();

	/**
	 * Saves the Factory pointers
	 *
	 * @return void
	 */
	protected function saveFactoryState()
	{
		$this->factoryState['application'] = JFactory::$application;
		$this->factoryState['config'] = JFactory::$config;
		$this->factoryState['session'] = JFactory::$session;
		$this->factoryState['language'] = JFactory::$language;
		$this->factoryState['document'] = JFactory::$document;
		$this->factoryState['acl'] = JFactory::$acl;
		$this->factoryState['database'] = JFactory::$database;
		$this->factoryState['mailer'] = JFactory::$mailer;
	}

	/**
	 * Saves the Factory pointers
	 *
	 * @return void
	 */
	protected function restoreFactoryState()
	{
		JFactory::$application = $this->factoryState['application'];
		JFactory::$config = $this->factoryState['config'];
		JFactory::$session = $this->factoryState['session'];
		JFactory::$language = $this->factoryState['language'];
		JFactory::$document = $this->factoryState['document'];
		JFactory::$acl = $this->factoryState['acl'];
		JFactory::$database = $this->factoryState['database'];
		JFactory::$mailer = $this->factoryState['mailer'];
	}

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
    	$this->saveFactoryState();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
    	$this->restoreFactoryState();
    }

	/**
	 *	Test cases for sendMail
	 *
	 * @return array
	 */
	function casesSendMail()
	{
		return array(
			'simple' => array(
				array(
					'from' => "test",
					'fromname' => 'Test Name',
					'recipient' => 'Test Recip',
					'subject' => 'Test Subject',
					'body' => "This is the body of the message",
					'mode' => 'Test Mode',
					'cc' => 'Test CC',
					'bcc' => 'Test BCC',
					'attachment' => 'Test att',
					'replyto' => 'test replyto',
					'replytoname' => 'test replytoname',
				),
				array(
					'from' => "test",
					'fromname' => 'Test Name',
					'recipient' => 'Test Recip',
					'subject' => 'Test Subject',
					'body' => "This is the body of the message",
					'mode' => 'Test Mode',
					'cc' => 'Test CC',
					'bcc' => 'Test BCC',
					'attachment' => 'Test att',
					'replyto' => 'test replyto',
					'replytoname' => 'test replytoname',
				),
				true,
			),
			'failure' => array(
				array(
					'from' => "test",
					'fromname' => 'Test Name',
					'recipient' => 'Test Recip',
					'subject' => 'Test Subject',
					'body' => "This is the body of the message",
					'mode' => 'Test Mode',
					'cc' => 'Test CC',
					'bcc' => 'Test BCC',
					'attachment' => 'Test att',
					'replyto' => 'test replyto',
					'replytoname' => 'test replytoname',
				),
				array(
					'from' => "test",
					'fromname' => 'Test Name',
					'recipient' => 'Test Recip',
					'subject' => 'Test Subject',
					'body' => "This is the body of the message",
					'mode' => 'Test Mode',
					'cc' => 'Test CC',
					'bcc' => 'Test BCC',
					'attachment' => 'Test att',
					'replyto' => 'test replyto',
					'replytoname' => 'test replytoname',
				),
				false,
			),
		);
	}

    /**
     * Testing sendMail().
     *
     * @param	array	Input arguments for array
     * @param	array	Arguments received by array
     * @param	bool	Expected result of method call
     *
     * @return void
     * @dataProvider casesSendMail
     * @group breaks
     */
    public function testSendMail( $args, $expectedArgs, $expResult )
    {
    	$mockMailer = $this->getMock('JMail', array('Send', 'setSender', 'setSubject', 'setBody', 'IsHTML', 'addRecipient', 'addCC', 'addBCC', 'addAttachment', 'addReplyTo'));
    	$mockMailer->expects($this->once())->method('Send')->with()->will($this->returnValue($expResult));
		$mockMailer->expects($this->once())->method('setSender')
											->with(array($expectedArgs['from'], $expectedArgs['fromname']));
		$mockMailer->expects($this->once())->method('setSubject')->with($expectedArgs['subject']);
		$mockMailer->expects($this->once())->method('setBody')->with($expectedArgs['body']);
		if($expectedArgs['mode']) {
			$mockMailer->expects($this->once())->method('IsHTML')->with(true);
		}
		$mockMailer->expects($this->once())->method('addRecipient')->with($expectedArgs['recipient']);
		$mockMailer->expects($this->once())->method('addCC')->with($expectedArgs['cc']);
		$mockMailer->expects($this->once())->method('addBCC')->with($expectedArgs['bcc']);
		$mockMailer->expects($this->once())->method('addAttachment')->with($expectedArgs['attachment']);
		$mockMailer->expects($this->exactly(count($expectedArgs['replyto'])))->method('addReplyTo');
		$mockMailer->expects($this->once())->method('Send')->with()->will($this->returnValue($expResult));
    	JFactory::$mailer = $mockMailer;

		$this->assertThat(
			JUtility::sendMail(
				$args['from'], $args['fromname'], $args['recipient'],
				$args['subject'], $args['body'], $args['mode'], $args['cc'], $args['bcc'],
				$args['attachment'], $args['replyto'], $args['replytoname']
			),
			$this->equalTo($expResult)
		);
    }

	/**
	 *	Test cases for sendAdminMail
	 *
	 * @return array
	 */
	function casesSendAdminMail()
	{
		return array(
			'simple' => array(
				array(
					'adminName' => "test",
					'adminEmail' => 'Test Name',
					'email' => 'Test Recip',
					'type' => 'Test Subject',
					'title' => "This is the body of the message",
					'author' => 'Test Mode',
					'url' => 'Test CC',
				),
				array(
					'adminName' => "test",
					'adminEmail' => 'Test Name',
					'email' => 'Test Recip',
					'subject' => 'User Submitted \'Test Subject\'',
					'body' => "Hello test,


A User submitted Test Subject:
 [ This is the body of the message ]
has been just submitted by User:
 [ Test Mode ]
for Test CC.



Please go to Test CC/administrator to view and approve this Test Subject.

Please do not respond to this message as it is automatically generated and is for information purposes only.
",
					'author' => 'Test Mode',
					'url' => 'Test CC',
				),
				true,
			),
			'failure' => array(
				array(
					'adminName' => "test",
					'adminEmail' => 'Test Name',
					'email' => 'Test Recip',
					'type' => 'Test Subject',
					'title' => "This is the body of the message",
					'author' => 'Test Mode',
					'url' => 'Test CC',
				),
				array(
					'adminName' => "test",
					'adminEmail' => 'Test Name',
					'email' => 'Test Recip',
					'subject' => 'User Submitted \'Test Subject\'',
					'body' => "Hello test,


A User submitted Test Subject:
 [ This is the body of the message ]
has been just submitted by User:
 [ Test Mode ]
for Test CC.



Please go to Test CC/administrator to view and approve this Test Subject.

Please do not respond to this message as it is automatically generated and is for information purposes only.
",
					'author' => 'Test Mode',
					'url' => 'Test CC',
				),
				false,
			),
		);
	}

    /**
     * Testing sendAdminMail().
     *
     * @param	array	Arguments for method call
     * @param	array	Arguments received by method
     * @param	bool	Expected return from call
     *
     * @return void
     *
     * @dataProvider casesSendAdminMail
     * @group breaks
     */
    public function testSendAdminMail( $args, $expectedArgs, $expResult )
    {
    	$mockMailer = $this->getMock('JMail', array('Send', 'setSubject', 'setBody', 'addRecipient'));
    	$mockMailer->expects($this->once())->method('Send')->with()->will($this->returnValue($expResult));
		$mockMailer->expects($this->once())->method('setSubject')->with($expectedArgs['subject']);
		$mockMailer->expects($this->once())->method('setBody')->with($expectedArgs['body']);
		$mockMailer->expects($this->once())->method('addRecipient')->with($expectedArgs['adminEmail']);
		$mockMailer->expects($this->once())->method('Send')->with()->will($this->returnValue($expResult));
    	JFactory::$mailer = $mockMailer;

		$this->assertThat(
			JUtility::sendAdminMail(
				$args['adminName'], $args['adminEmail'], $args['email'],
				$args['type'], $args['title'], $args['author'], $args['url']
			),
			$this->equalTo($expResult)
		);
    }

    /**
     * Testing getHash().
     *
     * @return void
     */
    public function testGetHash()
    {
    	$expResult = MD5("This is a test");
    	$mockApplication = $this->getMock('JAplication', array('getHash'));
    	$mockApplication->expects($this->once())->method('getHash')->will(
    		$this->returnValue($expResult)
    	);
    	JFactory::$application = $mockApplication;

    	$this->assertThat(
    		JUtility::getHash('Test'),
    		$this->equalTo($expResult)
    	);
    }

	/**
	 *	Test cases for getToken
	 *
	 * @return array
	 */
	function casesToken()
	{
		return array(
			'default' => array(
				null,
				false,
			),
			'false' => array(
				false,
				false,
			),
			'true' => array(
				true,
				true,
			),
		);
	}
    /**
     * Testing getToken().
     *
     * @param	bool	Input to getToken call
     * @param	bool	Expected results from getToken
     *
     * @return void
     *
     * @dataProvider casesToken
     */
    public function testGetToken( $data, $expResult )
    {
    	$mockSession = $this->getMock('JSession', array('_start', 'getFormToken'));
    	$mockSession->expects($this->once())->method('getFormToken')->will(
    		$this->returnValue($expResult)
    	);
    	JFactory::$session = $mockSession;

    	$this->assertThat(
    		is_null($data)?JUtility::getToken():JUtility::getToken($data),
    		$this->equalTo($expResult)
    	);
    }

	/**
	 * Test cases for parseAttributes
	 *
	 * @return array
	 */
	function casesParseAttributes()
	{
		return array(
			'jdoc' => array(
				'<jdoc style="fred" />',
				array( 'style' => 'fred' )
			),
			'xml' => array(
				"<img hear=\"something\" there=\"somethingelse\" />",
				array( 'hear' => 'something', 'there' => 'somethingelse' )
			),
		);
	}
    /**
     * Test parseAttributes
     *
     * @param	string	tag to be parsed
     * @param	array	resulting array of attribute values
     *
     * @return void
     *
     * @dataProvider casesParseAttributes
     */
    public function testParseAttributes( $tag, $expected )
    {
    	$this->assertThat(
    		JUtility::parseAttributes($tag),
    		$this->equalTo($expected)
    	);
    }

	/**
	 *	Test cases for isWinOS
	 *
	 * @return array
	 */
	function casesWinOS()
	{
		return array(
			'false' => array(
				false,
			),
			'true' => array(
				true,
			),
		);
	}

    /**
     * Testing isWinOS().
     *
     * @param	bool	return value from mock
     *
     * @return	void
     *
     * @dataProvider casesWinOS
     */
    public function testIsWinOS( $expResult )
    {
    	$mockApplication = $this->getMock('JAplication', array('isWinOS'));
    	$mockApplication->expects($this->once())->method('isWinOS')->will(
    		$this->returnValue($expResult)
    	);
    	JFactory::$application = $mockApplication;

    	$this->assertThat(
    		JUtility::isWinOS(),
    		$this->equalTo($expResult)
    	);
    }

	/**
	 *	Test cases for isWinOS
	 *
	 * @return array
	 */
	function casesDump()
	{
		return array(
			'false' => array(
				array(
					'fred' => 12,
					'blue' => 2,
					'banana' => 1,
				),
				false,
				"<pre>array (\n  'fred' => 12,\n  'blue' => 2,\n  'banana' => 1,\n)</pre>"
			),
			'true' => array(
				array(
					'fred' => 12,
					'blue' => 2,
					'banana' => 1,
				),
				true,
				"<pre>array (\n  'fred' =&gt; 12,\n  'blue' =&gt; 2,\n  'banana' =&gt; 1,\n)</pre>"
			),
		);
	}

    /**
     * Test dump
     *
     * @param	mixed	variable to be dumped
     * @param	bool	Should text be htmlsafe
     * @param	string	expected result
     *
     * @return void
     * @dataProvider casesDump
     */
    public function testDump( $value, $htmlsafe, $expected )
    {
    	$this->assertThat(
    		JUtility::dump($value, $htmlsafe),
    		$this->equalTo($expected)
    	);
    }

    /**
     * Test array_unshift_ref
     *
     * @return void
     * @todo Implement testArray_unshift_ref().
     */
    public function testArrayUnshiftRef()
    {
    	$input = array( 3, 5, 7 );
    	$expected = array( "fred", 3, 5, 7 );
    	$value = "fred";
    	
    	$this->assertThat(
    		JUtility::array_unshift_ref($input, $value),
    		$this->equalTo(4)
    	);
    	$this->assertThat(
    		$input,
    		$this->equalTo($expected)
    	);
    }

	/**
	 * Test cases for return_bytes
	 *
	 * @return array
	 */
	function casesReturnBytes()
	{
		return array(
			'G' => array(
				'100G',
				107374182400,
			),
			'M' => array(
				'10M',
				10485760,
			),
			'K' => array(
				'100K',
				102400,
			),
		);
	}
	
    /**
     * Test return_bytes
     *
     * @param	string	Descirption of size in multiples of 1024
     * @param	int		Size in bytes
     *
     * @return void
     * @dataProvider casesReturnBytes
     */
    public function testReturnBytes( $bytes, $expected )
    {
    	$this->assertThat(
    		JUtility::return_bytes($bytes),
    		$this->equalTo($expected)
    	);
    }
}

