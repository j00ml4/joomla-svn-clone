<?php
/**
 * Joomla! Unit Test Facility.
 *
 * Produce a listing of unit test status by class
 *
 * @package Joomla
 * @subpackage UnitTest
 * @copyright Copyright (C) 2005 - 2008 Open Source Matters, Inc.
 * @version $Id$
 */

class JUnit_TestStatus
{
	static protected $_defaultExcludes = array(
		'plugins/system/legacy/.*',
	);

	static protected $_defaultIncludes = array(
		'administrator/.*',
		'components/.*',
		'libraries/joomla/.*',
		'modules/.*',
		'plugins/.*',
		'templates/beez/.*',
		'templates/rhuk_milkyway/.*',
		'templates/system/.*',
		'xmlrpc/.*',
	);

	protected $_excludes;

	protected $_includes;

	protected $_options = array( 'debug' => false);

	protected $_startDir;

	public $classList;

	public $orphans;

	/**
	 * Line terminator.
	 *
	 * @var string
	 */
	static $eol = PHP_EOL;

	function __construct()
	{
		$this->_excludes = self::$_defaultExcludes;
		$this->_includes = self::$_defaultIncludes;
	}

	/**
	 * Walk a directory tree, accumulating file paths.
	 *
	 * @param string Scan mode. If set to "tests", accumulates files of the form
	 * "*-test.php"
	 */
	protected function _dirWalk($mode, &$fileList, $dir)
	{
		if (strlen($dir) && ($dir[strlen($dir) - 1] != '/')) {
			$dir .= '/';
		}
		$path = $this->_startDir . $dir;
		if (! @is_dir($path)) {
			throw new Exception('Scan error. ' . $path . ' is not a directory.', 1);
		}
		if(! ($dh = @opendir($path))) {
			throw new Exception('Scan error. Unable to open ' . $path, 2);
		}
		if ($this->_options['debug']) {
			echo 'Processing directory "' . $dir . '"' . self::$eol;
		}
		/*
		 * Walk through the directory collecting files and subdirectories Then
		 * we sort them to get the correct sequence.
		 */
		$list = array();
		$subList = array();
		while (($fileName = readdir($dh)) !== false) {
			$fid = $path . $fileName;
			switch (filetype($fid)) {
				case 'dir': {
					if ($fileName != '.' && $fileName != '..') {
						$subList[] = $fileName;
					}
				} break;

				case 'file': {
					//echo $fileName . PHP_EOL;
					/*
					 * Add matching file paths to the results
					 */
					switch ($mode) {
						case 'tests': {
							if (substr($fileName, -9) == '-test.php') {
								if ($this->_isFiltered($fid)) {
									if ($this->_options['debug']) {
										echo 'Filtered: ' . $fid . self::$eol;
									}
									continue;
								}
								$list[] = $fileName;
							}
						}
						break;

						case 'joomla': {
							if (substr($fileName, -4) == '.php') {
								if ($this->_isFiltered($fid)) {
									if ($this->_options['debug']) {
										echo 'Filtered: ' . $fid . self::$eol;
									}
									continue;
								}
								$list[] = $fileName;
							}
						}
						break;

					}
				} break;
			}
		}
		sort($list);

		foreach ($list as $fileName) {
			$fileList[] = $path . $fileName;
		}
		sort($subList);
		foreach ($subList as $subDir) {
			$this->_dirWalk($mode, $fileList, $dir . $subDir);
		}
	}

	/**
	 * Determine if a path is excluded by a filter.
	 *
	 * This function ensures the passed in path matches an include rule
	 *
	 * @param string The candidate test file name.
	 * @return boolean True if the file is excluded by filters.
	 */
	protected function _isFiltered($fid)
	{
		foreach ($this->_excludes as $dir) {
			$pattern = '|' . $this->_startDir . $dir . '|';
			if (preg_match($pattern, $fid)) {
				return true;
			}
		}
		foreach ($this->_includes as $dir) {
			$pattern = '|' . $this->_startDir . $dir . '|';
			if (preg_match($pattern, $fid)) {
				return false;
			}
		}
		return true;
	}

	function renderHtml()
	{
		$html = '';
		$byDir = array();
		$html = 'Unit test Status Report Generated by ' . basename(__FILE__)
			. ' at ' . gmdate('Y m d H:i:s') . ' UTC<br/>' . chr(10);
		$html .= '<table border="1">' . chr(10)
			. '<tr><th colspan="3">Unit Test Status by Class</th></tr>' . chr(10)
			. '<tr><th>Class</th><th>Number of Test Files</th><th>Source File</th></tr>'
			. chr(10);
		$row = 0;
		foreach ($this->classList as $className => $details) {
			$rowStyle = ($row & 1) ? 'f0f0f0' : 'e0e0e0';
			$countStyle = $rowStyle;
			$countStyle[$details['testfiles'] ? 3 : 1] = 'f';
			++$row;
			$html .= '<tr style="background-color:#' . $rowStyle . '">'
				 .'<td>' . $className . '</td>'
				. '<td style="background-color:#' . $countStyle . '">' . $details['testfiles'] . '</td>'
				. '<td>' . $details['source'] . '</td>'
				. '</tr>'
				. chr(10);
			$dir = dirname($details['source']);
			if (! isset($byDir[$dir])) {
				$byDir[$dir] = array();
			}
			$byDir[$dir][$className] = $details;
		}
		$html .= '</table>' . chr(10);
		$html .= '<br/>' . chr(10);
		/*
		 * Now the directory list
		 */
		ksort($byDir);
		$html .= '<table border="1">' . chr(10)
			. '<tr><th colspan="3">Unit Test Status by Directory</th></tr>'
			. chr(10)
			. '<tr><th>Class</th><th>Number of Test Files</th><th>Source File</th></tr>'
			. chr(10)
			;
		foreach ($byDir as $path => $classInfo) {
			$html .= '<tr><th colspan="3">' . $path . '</th></tr>'
				. chr(10);
			$row = 0;
			foreach ($classInfo as $className => $details) {
				$rowStyle = ($row & 1) ? 'f0f0f0' : 'e0e0e0';
				$countStyle = $rowStyle;
				$countStyle[$details['testfiles'] ? 3 : 1] = 'f';
				++$row;
				$html .= '<tr style="background-color:#' . $rowStyle . '">'
					. '<td>' . $className . '</td>'
					. '<td style="background-color:#' . $countStyle . '">' . $details['testfiles'] . '</td>'
					. '<td>' . basename($details['source']) . '</td>'
					. '</tr>'
					. chr(10);
			}
		}
		$html .= '</table>' . chr(10);
		$html .= '<br/>' . chr(10);
		/*
		 * Now the orphans and non-class tests
		 */
		$html .= '<table border="1">' . chr(10)
			. '<tr><th colspan="2">Tests of Non-Classes or Missing Classes</th></tr>' . chr(10)
			. '<tr><th>Class</th><th>Source File</th></tr>'
			. chr(10);
		foreach ($this->orphans as $className => $path) {
			$rowStyle = ($row & 1) ? 'f0f0f0' : 'e0e0e0';
			++$row;
			$html .= '<tr style="background-color:#' . $rowStyle . '">'
				. '<td>' . $className . '</td>'
				. '<td>' . $path . '</td>'
				. '</tr>'
				. chr(10);
		}
		$html .= '</table>' . chr(10);
		return $html;
	}

	function scan($joomla, $tests)
	{
		$joomla = str_replace('\\', '/', $joomla);
		$tests = str_replace('\\', '/', $tests);
		/*
		 * Extract a list of all included classes.
		 */
		$sourceFiles = array();
		$this->setStartDir($joomla);
		$this->_dirWalk('joomla', $sourceFiles, '');
		$this->classList = array();
		foreach ($sourceFiles as $path) {
			$tokens = token_get_all(file_get_contents($path));
			$capture = false;
			$isAbstract = false;
			foreach ($tokens as $tnum => $token) {
				if (is_string($token)) {
					if ($token == '{') {
						$isAbstract = false;
					}
				} else {
					switch ($token[0]) {
						case T_ABSTRACT: {
							$isAbstract = true;
						}
						break;

						case T_CHARACTER: {
							if ($token[1] == '{') {
								$isAbstract = false;
							}
						}
						break;

						case T_CLASS: {
							$capture = ! $isAbstract;
						}
						break;

						case T_STRING: {
							if ($capture) {
								$this->classList[$token[1]] = array(
									'source' => substr($path, strlen($joomla)),
									'testfiles' => 0,
								);
								$capture = false;
							}
						}
						break;

					}
				}
			}
		}
		ksort($this->classList);
		/*
		 * Extract a list of all included classes.
		 */
		$testFiles = array();
		$this->setStartDir($tests);
		$this->_dirWalk('tests', $testFiles, '');
		$this->orphans = array();
		foreach ($testFiles as $path) {
			$bits = explode('-', basename($path));
			$testClass = $bits[0];
			if (isset($this->classList[$testClass])) {
				++$this->classList[$testClass]['testfiles'];
			} else {
				$this->orphans[$testClass] = $path;
			}
		}
		//print_r($this->classList);
		//print_r($this->orphans);
	}

	function setStartDir($dir)
	{
		if (strlen($dir) && ($dir[strlen($dir) - 1] != '/')) {
			$dir .= '/';
		}
		$this->_startDir = $dir;
	}
}
