<?php
require_once 'PHPUnit/Framework.php';

include_once JPATH_BASE.'/libraries/joomla/filesystem/path.php';
include_once JPATH_BASE.'/libraries/joomla/environment/uri.php';
include_once JPATH_BASE.'/libraries/joomla/html/html.php';
require_once JPATH_BASE.'/libraries/joomla/html/html/behavior.php';

/**
 * Test class for JHtmlBehavior.
 * Generated by PHPUnit on 2009-10-27 at 15:39:41.
 */
class JHtmlBehaviorTest extends JoomlaTestCase
{
	/**
	 * @var JHtmlBehavior
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->saveFactoryState();
//		$this->object = new JHtmlBehavior;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		$this->restoreFactoryState();

		// reregister the script method
		JHtml::unregister('script');
	}

	/**
	 * @todo Implement testFramework().
	 */
	public function testFramework()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testMootools().
	 */
	public function testMootools()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testCaption().
	 */
	public function testCaption()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testFormvalidation().
	 */
	public function testFormvalidation()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testSwitcher().
	 */
	public function testSwitcher()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testCombobox().
	 */
	public function testCombobox()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testTooltip().
	 */
	public function testTooltip()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testModal().
	 */
	public function testModal()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	protected $uploaderScriptCalls = array(
		array('system/swf.js', false, true),
		array('system/progressbar.js', false, true),
		array('system/uploader.js', false, true)
	);


	public function uploaderScriptMock($file, $framework, $relative)
	{
		foreach($this->uploaderScriptCalls AS $k => $v) {
			if ($file == $v[0] && $framework == $v[1] && $relative == $v[2])
			{
				unset($this->uploaderScriptCalls[$k]);
				return;
			}
		}
		$this->uploaderScriptCalls[] = array(false, false, false);
		return;
	}

	public function addScriptDeclaration($string = null) {
		static $script;

		if($string) {
			$script = $string;
		}

		return $script;
	}


	public function uploaderData()
	{
		return array(
			array('file-upload', array(), 'upload-queue',
				array(
					array('/var/', 'object creation missing'),
					array('/verbose: \'1\'/', 'Verbose set to false'),
					array('#window\.addEvent\(\'domready\', function\(\)\{\'#', 'Not added to verbose')
				)
			)
		);

	}


	/**
	 * Tests various thing about uploader
	 * @dataProvider uploaderData
	 */
	public function testUploader($id, $params, $upload_queue, $expected_regexes = array())
	{
		$_SERVER['HTTP_HOST'] = '127.0.0.1';
		$_SERVER['REQUEST_URI'] = '/index.php';
		$_SERVER['PHP_SELF'] = '/index.php';
		$_SERVER['SCRIPT_NAME'] = '/index.php';

		// we register our mock for the script method
		JHtml::register('script', array($this, 'uploaderScriptMock'));

		// registers the document mock
		JFactory::$document = $this;

		JHtml::_('behavior.uploader', $id, $params, $upload_queue);

		$addedScript = $this->addScriptDeclaration();
		echo $addedScript;
		foreach($expected_regexes AS $regex)
		{
			$this->assertThat(
				preg_match($regex[0], $addedScript),
				$this->greaterThanOrEqual(1),
				$regex[1]
			);
		}

	}

	/**
	 * @todo Implement testTree().
	 */
	public function testTree()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testCalendar().
	 */
	public function testCalendar()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testKeepalive().
	 */
	public function testKeepalive()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}
}
