<?php
/**
 * @version		$Id$
 * @copyright	Copyright (C) 2005 - 2010 Open Source Matters. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 */

require_once JPATH_BASE.'/libraries/joomla/event/dispatcher.php';
require_once dirname(__FILE__).'/dispatcherSamples.php';
require_once dirname(__FILE__).'/JDispatcherStub.php';

/**
 * Test class for JDispatcher.
 * Generated by PHPUnit on 2009-10-09 at 14:07:13.
 */
class JDispatcherTest extends PHPUnit_Framework_TestCase {
	/**
	 * @var	JDispatcher
	 * @access protected
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 *
	 * @access protected
	 */
	protected function setUp() {
		$this->object = new JDispatcher;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 *
	 * @access protected
	 */
	protected function tearDown() {
	}

	/**
	 * Tests that we get a JDispatcher object
	 */
	public function testGetInstance() {
		$dispatcher = JDispatcher::getInstance();

		$this->assertThat(
			$dispatcher,
			$this->isInstanceOf('JDispatcher')
		);
	}

	/**
	 * Test register when used with a function to handle an event
	 */
	public function testRegisterWithFunction() {
		$dispatcher = $this->getMock('JDispatcher', array('attach'));
		$dispatcher->expects($this->once())
			->method('attach')
			->with($this->equalTo(array('event' => 'testEvent', 'handler' => 'myTestHandler')));
		
		$dispatcher->register('testEvent', 'myTestHandler');
	}

	/**
	 * Test register when used with a class to handle an event
	 */
	public function testRegisterWithClass() {
		$dispatcher = $this->getMock('JDispatcher', array('attach'));
		
		// attach should get called once with an object of our observer class
		$dispatcher->expects($this->once())
			->method('attach')
			->with($this->isInstanceOf('myTestClassHandler'));

		// we reset $observables so we have a known state
		myTestClassHandler::$observables = array();
		
		// we perform out register
		$dispatcher->register('testEvent', 'myTestClassHandler');
		
		// we assert that we were registered with a JDispatcher
		$this->assertThat(
			myTestClassHandler::$observables[0],
			$this->isInstanceOf('JDispatcher')
		);
		
		// and that we were instantiated only once
		$this->assertThat(
			count(myTestClassHandler::$observables[0]),
			$this->equalTo(1)
		);
	}


	/**
	 * Trigger an event that will be handled by a function
	 */
	public function testTrigger() {
		// instantiate our dispatcher
		$dispatcher = new JDispatcherStub;

		// setup our state
		$methods = array('myevent' => array(0));
		$observers = array(array('event' => 'myEvent', 'handler' => 'myTestHandler'));

		$dispatcher->setMethods($methods);
		$dispatcher->setObservers($observers);
		
		// perform our trigger
		$this->assertThat(
			$dispatcher->trigger('myEvent'),
			$this->equalTo(array(12345))
		);

		$this->assertThat(
			myTestHandler(true),
			$this->equalTo(array(array()))
		);

		// perform our trigger with parameters
		$this->assertThat(
			$dispatcher->trigger('myEvent', array('hello', 'goodbye')),
			$this->equalTo(array('goodbye'))
		);

		$this->assertThat(
			myTestHandler(true),
			$this->equalTo(array(array('hello', 'goodbye')))
		);

	}
}
?>
