<?php
/**
 * @version		$Id$
 * @copyright	Copyright (C) 2005 - 2010 Open Source Matters. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 * @package		JoomlaFramework
 */

 //Complusoft JoomlaTeam - Support: JoomlaTeam@Complusoft.es
require_once JPATH_BASE.'/libraries/joomla/access/access.php';
require_once JPATH_BASE.'/tests/unit/JoomlaDatabaseTestCase.php';
/**
 * Test class for JAccess.
 * Generated by PHPUnit on 2009-10-08 at 11:50:03.
 * @package		JoomlaFramework
 */

class JAccessTest extends JoomlaDatabaseTestCase {
	/**
	 * @var		JAccess
	 * @access	protected
	 */
	protected $object;
        var $have_db = false;

	/**
	 * Gets the data set to be loaded into the database during setup
	 *
	 * @return xml dataset
	 */
	protected function getDataSet()
	{
		return $this->createXMLDataSet(JPATH_BASE . '/tests/unit/stubs/jos_assets.xml');
	}
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 *
	 * @access protected
	 */
	protected function setUp() {
            parent::setUp();
            $this->object = new JAccess;
        }
	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 *
	 * @access protected
	 */
	protected function tearDown() {
            parent::tearDown();
	}

	/**
	 * @todo Implement testCheck().
	 */

	public function testCheck() {
	    if (defined('DB_NOT_AVAILABLE')) {
		$this->markTestSkipped('The database is not available');
	    }

            $access = new JAccess();
            $access2 = new JAccess();
           /* $GroupUser42 = array(
			0	=> 1,
			1	=> 6,
			2	=> 7,
            3	=> 8
		);*/
            //"core.login.site":{"6":1,"2":1}
            //"core.login.admin":{"6":1}
            //"core.admin":{"8":1,"7":1}
            //"core.manage":{"7":1,"10":1,"6":1},
            //"core.create":{"6":1}
            //"core.delete":{"6":1}
            //"core.edit":{"6":1}
            //"core.edit.state":{"6":1}}';
            //$this->assertTrue($access2->check('78',4,234));
            $this->assertThat(
				Null,
				$this->equalTo($access->check('58','core.login.site')),
                                'login site 58 to default asset'
				);
            $this->assertThat(
				Null,
				$this->equalTo($access->check('58','core.login.site',3)),
                                'login site 58'
				);
            $this->assertThat(
				Null,
				$this->equalTo($access->check('42','complusoft',3)),
                                'complusoft 42'
				);
            $this->assertThat(
				true,
				$this->equalTo($access->check('42','core.login.site',345)),
                                'login site 42'
			);
            $this->assertTrue($access->check('42','core.login.site',3), 'core.login.site 42,3 is not true');
            $this->assertTrue($access->check('42','core.login.admin',3), 'core.login.admin 42,3 is not true');
            $this->assertTrue($access->check('42','core.admin',3), 'core.admin 42,3 is not true');
            $this->assertTrue($access->check('42','core.manage',3), 'core.manage 42,3 is not true');
            $this->assertTrue($access->check('42','core.create',3), 'core.create 42,3 is not true');
            $this->assertTrue($access->check('42','core.delete',3), 'core.delete 42,3 is not true');
            $this->assertTrue($access->check('42','core.edit',3), 'core.edit 42,3 is not true');
            $this->assertTrue($access->check('42','core.edit.state',3), 'core.edit.state 42,3 is not true');
        }


	/**
	 * @todo Implement testGetAssetRules().
	 */
	public function testGetAssetRules() {
	        if (defined('DB_NOT_AVAILABLE')) {
		    $this->markTestSkipped('The database is not available');
		}

		$access = new JAccess();
                $ObjArrayJrules = $access->getAssetRules(3, True);
                $string1 = '{"core.login.site":{"6":1,"2":1},"core.login.admin":{"6":1},"core.admin":{"8":1,"7":1},"core.manage":{"7":1,"10":1,"6":1},"core.create":{"6":1},"core.delete":{"6":1},"core.edit":{"6":1},"core.edit.state":{"6":1}}';
                $this->assertThat(
			$string1,
			$this->equalTo((string)$ObjArrayJrules)
		);

                $ObjArrayJrules = $access->getAssetRules(3, False);
                $string1 = '{"core.admin":{"7":1},"core.manage":{"6":1},"core.create":[],"core.delete":[],"core.edit":[],"core.edit.state":[]}';
                $this->assertThat(
			$string1,
			$this->equalTo((string)$ObjArrayJrules)
		);

                $ObjArrayJrules = $access->getAssetRules(1550, False);
                $string1 = '[]';
                $this->assertThat(
			$string1,
			$this->equalTo((string)$ObjArrayJrules)
		);

                $ObjArrayJrules = $access->getAssetRules('Unknown Asset', False);
                $string1 = '[]';
                $this->assertThat(
			$string1,
			$this->equalTo((string)$ObjArrayJrules),
                        'Testing access rules for unknwon asset'
		);

	}

        public function testGetUsersByGroup() {
	        if (defined('DB_NOT_AVAILABLE')) {
		    $this->markTestSkipped('The database is not available');
		}

		$access = new JAccess();
		$array1 = array(
			0	=> 42
		);
                $this->assertThat(
			$array1,
			$this->equalTo($access->getUsersByGroup(8, True))
		);
                $this->assertThat(
			$array1,
			$this->equalTo($access->getUsersByGroup(7, True))
		);

                $array2 = array();
                $this->assertThat(
			$array2,
			$this->equalTo($access->getUsersByGroup(7, False))
		);
	}

	/**
	 * @todo Implement testGetGroupsByUser().
	 */
	public function testGetGroupsByUser() {
	        if (defined('DB_NOT_AVAILABLE')) {
		    $this->markTestSkipped('The database is not available');
		}

                $access = new JAccess();
		$array1 = array(
			0	=> 1,
			1	=> 6,
			2	=> 7,
            3	=> 8
		);
                $this->assertThat(
			$array1,
			$this->equalTo($access->getGroupsByUser(42, True))
		);
                $array2 = array(
                  0     => 8
                );
                $this->assertThat(
			$array2,
			$this->equalTo($access->getGroupsByUser(42, False))
		);

	}

	/**
	 * @todo Implement testGetAuthorisedViewLevels().
	 */
	public function testGetAuthorisedViewLevels() {
	        if (defined('DB_NOT_AVAILABLE')) {
		    $this->markTestSkipped('The database is not available');
		}

		$access = new JAccess();
		$array1 = array(
			0	=> 1,
            1   => 3
		);


        $this->assertThat(
		$array1,
		$this->equalTo($access->getAuthorisedViewLevels(42)),
                        'Testing Viewlevels of User 42'
		);

        $array2 = array(
            0   => 1
        );
        $this->assertThat(
			$array2,
			$this->equalTo($access->getAuthorisedViewLevels(50)),
                        'Testing Viewlevels of User 50'
		);

        $array3 = array(
            0   =>  1,
            1   =>  4
        );
        $this->assertThat(
			$array3,
			$this->equalTo($access->getAuthorisedViewLevels(43)),
                        "Testing Viewlevels of User 43"
		);
	}

	/**
	 * @todo Implement testGetActions().
	 */
	public function testGetActions() {
		$access = new JAccess();
                $array1 = array(
			'name'	      => "core.admin",
                        'title'       => "JACTION_ADMIN",
                        'description' => "JACTION_ADMIN_COMPONENT_DESC"
		);
                $array2 = array(
			'name'	      => "core.manage",
                        'title'       => "JACTION_MANAGE",
                        'description' => "JACTION_MANAGE_COMPONENT_DESC"
		);
                $array3 = array(
			'name'	      => "core.create",
                        'title'       => "JACTION_CREATE",
                        'description' => "JACTION_CREATE_COMPONENT_DESC"
		);
                $array4 = array(
			'name'	      => "core.delete",
                        'title'       => "JACTION_DELETE",
                        'description' => "JACTION_DELETE_COMPONENT_DESC"
		);
                $array5 = array(
			'name'	      => "core.edit",
                        'title'       => "JACTION_EDIT",
                        'description' => "JACTION_EDIT_COMPONENT_DESC"
		);
                 $array6 = array(
			'name'	      => "core.edit.state",
                        'title'       => "JACTION_EDIT_STATE",
                        'description' => "JACTION_EDIT_STATE_COMPONENT_DESC"
		);




		$obj= $access->getActions('com_banners', 'component');
                $arraystdClass =  (array)$obj[0];
                $this->assertThat(
			$array1,
			$this->equalTo($arraystdClass)
		);
                $arraystdClass =  (array)$obj[1];
                $this->assertThat(
			$array2,
			$this->equalTo($arraystdClass)
		);
                $arraystdClass =  (array)$obj[2];
                $this->assertThat(
			$array3,
			$this->equalTo($arraystdClass)
		);
                $arraystdClass =  (array)$obj[3];
                $this->assertThat(
			$array4,
			$this->equalTo($arraystdClass)
		);
                $arraystdClass =  (array)$obj[4];
                $this->assertThat(
			$array5,
			$this->equalTo($arraystdClass)
		);
                $arraystdClass =  (array)$obj[5];
                $this->assertThat(
			$array6,
			$this->equalTo($arraystdClass)
		);


                $this->assertThat(
			$array7 = array(),
			$this->equalTo($access->getActions('com_complusoft', 'component'))
		);

        }
}
