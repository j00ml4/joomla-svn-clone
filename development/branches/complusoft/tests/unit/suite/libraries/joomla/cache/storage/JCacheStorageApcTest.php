<?php
/**
 * JCacheStorageApcTest -- The test suite for JCacheStorageApc
 *
 * @version		$Id$
 * @package	Joomla.UnitTest
 * @copyright	Copyright (C) 2005 - 2010 Open Source Matters. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 */
/**
 * Test class for JCacheStorageApc.
 * Generated by PHPUnit on 2009-10-08 at 21:44:48.
 *
 * @package	Joomla.UnitTest - Support: joomlateam@complusoft.es
 * @subpackage Cache
 *
 */
class JCacheStorageApcTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var	JCacheStorageApc
	 * @access protected
	 */
	protected $object;

	/**
	 * @var	apcAvailable
	 * @access protected
	 */
	protected $apcAvailable;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 *
	 * @return void
	 * @access protected
	 */
	protected function setUp()
	{
		include_once JPATH_BASE.'/libraries/joomla/cache/storage.php';
		include_once JPATH_BASE.'/libraries/joomla/cache/storage/apc.php';

		$this->object = JCacheStorage::getInstance('apc');
		$this->apcAvailable = extension_loaded('apc');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 *
	 *
	 * @return void
	 * @access protected
	 */
	protected function tearDown()
	{
	}

	/**
	 *
	 * @return void
	 * @todo Implement testGet().
	 */
	public function testGet()
	{
            $id = 42;
            $group = 8;
            $checkTime = false;

            if ($this->apcAvailable)
            {
                $this->assertThat(
                    $this->object->get($id, $group, $checkTime),
                    $this->isFalse(),
                    'Get data id=42 | group=8.'
                );
            }
            else
            {
                $this->markTestSkipped('This caching method is not supported on this system.');
            }
	}

	/**
	 *
	 * @return void
	 * @todo Implement testStore().
	 */
	public function testStore()
	{
            $id = 42;
            $idf = 51;
            $group = 8;
            $groupf = 22;
            $data = "Data store cache";
            $dataf = 1;

            if ($this->apcAvailable)
            {
                $this->assertThat(
                    $this->object->store($id, $group, $data),
                    $this->isTrue(),
                    'Not store data id=42 | group=8.'
                );
                $this->assertThat(
                    $this->object->store($idf, $groupf, $dataf),
                    $this->isTrue(),
                    'Not store data id=51 | group=22.'
                );
            }
            else
            {
                $this->markTestSkipped('This caching method is not supported on this system.');
            }
	}

	/**
	 *
	 * @return void
	 * @todo Implement testRemove().
	 */
	public function testRemove()
	{
            $id = 42;
            $idf = 50;
            $group = 8;
            $groupf = 20;

            if ($this->apcAvailable)
            {
                $this->assertThat(
                    $this->object->remove($id, $group),
                    $this->isTrue(),
                    'Not remove id=42 | group=8.'
                );
                $this->assertThat(
                    $this->object->remove($idf, $groupf),
                    $this->isFalse(),
                    'Remove id=50 | group=20.'
                );
            }
            else
            {
                $this->markTestSkipped('This caching method is not supported on this system.');
            }
	}

	/**
	 *
	 * @return void
	 * @todo Implement testClean().
	 */
	public function testClean()
	{
            $group = 8;
            $groupf = 20;
            $mode1 = "group";
            $mode2 = "notgroup";

            if ($this->apcAvailable)
            {
                $this->assertThat(
                    $this->object->clean($group,$mode1),
                    $this->isTrue(),
                    'Not clean group=8 | mode=group.'
                );
                $this->assertThat(
                    $this->object->clean($group,$mode2),
                    $this->isTrue(),
                    'Not clean group=8 | mode=notgroup.'
                );
                $this->assertThat(
                    $this->object->clean($groupf,$mode1),
                    $this->isTrue(),
                    'Not clean group=20 | mode=group.'
                );
                $this->assertThat(
                    $this->object->clean($groupf,$mode2),
                    $this->isTrue(),
                    'Not clean group=20 | mode=notgroup.'
                );
            }
            else
            {
                $this->markTestSkipped('This caching method is not supported on this system.');
            }
	}

	/**
	 * Testing test().
	 *
	 * @return void
	 */
	public function testTest()
	{
            $this->assertThat(
                $this->object->test(),
                $this->isTrue(),
                'Claims APC is not loaded.'
            );
	}

	/**
	 *
	 * @return void
	 * @todo Implement test_setExpire().
	 */
	/*public function testSetExpire()
	{
		if ($this->apcAvailable)
		{
			$this->markTestIncomplete('This test has not been implemented yet.');
		}
		else
		{
			$this->markTestSkipped('This caching method is not supported on this system.');
		}
	}*/

	/**
	 *
	 * @return void
	 * @todo Implement test_getCacheId().
	 */
	public function testGetCacheId()
	{
            $id = 42;
            $group = 8;

            // create chache id compare
            $compare = "cache_8-1a451b73e35d52dc26d333836b2beca0";
            $comparef = "cache_42-1a451b73e35d52dc26d333836b2beca0";

            if ($this->apcAvailable)
            {
                $this->assertEquals(
                    $compare,
                    $this->object->_getCacheID($id, $group)
                );
                $this->assertNotEquals(
                    $comparef,
                    $this->object->_getCacheID($id, $group)
                );
            }
            else
            {
                $this->markTestSkipped('This caching method is not supported on this system.');
            }
	}
}
?>
