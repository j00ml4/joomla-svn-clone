<?php
require_once 'PHPUnit/Framework.php';

require_once JPATH_BASE.'/libraries/joomla/html/parameter.php';

class JParameterInspector extends JParameter
{
	public function getElementPath()
	{
		return $this->_elementPath;
	}
}

/**
 * Test class for JParameter.
 * Generated by PHPUnit on 2009-10-27 at 15:38:18.
 */
class JParameterTest extends PHPUnit_Framework_TestCase
{
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @todo Implement testAddElementPath().
	 */
	public function testAddElementPath()
	{
		$p = new JParameterInspector('');
		$p->addElementPath(dirname(__FILE__));

		$expected = array(
			// addElementPath appends the slash for some reason.
			dirname(__FILE__).'/',
			JPATH_LIBRARIES.'/joomla/html/parameter/element'
		);

		$this->assertThat(
			$p->getElementPath(),
			$this->equalTo($expected)
		);
	}

	/**
	 * @todo Implement testBind().
	 */
	public function testBind()
	{
		$p = new JParameter('');

		// Check binding an array.
		$p->bind(array(
			'foo1' => 'bar1'
		));
		$this->assertThat(
			$p->get('foo1'),
			$this->equalTo('bar1')
		);

		// Check binding an object.
		$object = new stdClass;
		$object->foo1 = 'bar2';
		$p->bind($object);
		$this->assertThat(
			$p->get('foo1'),
			$this->equalTo('bar2')
		);

		// Check binding a JSON string.
		$p->bind('{"foo1":"bar4"}');
		$this->assertThat(
			$p->get('foo1'),
			$this->equalTo('bar4')
		);

		// Check binding an INI string.
		$p->bind('foo1=bar5');
		$this->assertThat(
			$p->get('foo1'),
			$this->equalTo('bar5')
		);
	}

	/**
	 * @todo Implement testDef().
	 */
	public function testDef()
	{
		$p = new JParameter('');

		$p->set('foo1', 'bar1');

		$this->assertThat(
			$p->def('foo1', 'bar2'),
			$this->equalTo('bar1')
		);

		$this->assertThat(
			$p->def('foo2', 'bar2'),
			$this->equalTo('bar2')
		);
	}

	/**
	 * @todo Implement testGet().
	 */
	public function testGet()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testGetGroups().
	 */
	public function testGetGroups()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testGetNumParams().
	 */
	public function testGetNumParams()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testGetParam().
	 */
	public function testGetParam()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testGetParams().
	 */
	public function testGetParams()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testLoadElement().
	 */
	public function testLoadElement()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testLoadSetupFile().
	 */
	public function testLoadSetupFile()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testRender().
	 */
	public function testRender()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testRenderToArray().
	 */
	public function testRenderToArray()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testSet().
	 */
	public function testSet()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testSetXML().
	 */
	public function testSetXML()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}
}