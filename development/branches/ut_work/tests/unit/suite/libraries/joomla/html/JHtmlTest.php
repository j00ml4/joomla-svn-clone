<?php
require_once 'PHPUnit/Framework.php';

require_once JPATH_BASE. DS . 'libraries' . DS . 'joomla' . DS . 'filesystem' . DS . 'path.php';
require_once JPATH_BASE. DS . 'libraries' . DS . 'joomla' . DS . 'html' . DS . 'html.php';

/**
 * Test class for JHtml.
 * Generated by PHPUnit on 2009-10-27 at 15:36:23.
 */
class JHtmlTest extends JoomlaTestCase
{
	/**
	 * @var JHtml
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
//		$this->object = new JHtml;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @todo Implement test_().
	 */
	public function test_()
	{
		// first we test to ensure that if a handler is properly registered, it gets called
		$registered = $this->getMock('MyHtmlClass', array('mockFunction'));

		// test that we can register the method
		JHtml::register('file.testfunction', array($registered, 'mockFunction'));

		// test that calling _ actually calls the function
		$registered->expects($this->once())
			->method('mockFunction')
			->with('Test Return Value')
			->will($this->returnValue('My Expected Return Value'));

		$this->assertThat(
			JHtml::_('file.testfunction', 'Test Return Value'),
			$this->equalTo('My Expected Return Value')
		);

		// we unregister the method to return to our original state
		JHtml::unregister('prefix.file.testfunction');

		// now we test with a class that will be found in the expected file
		JHtml::addIncludePath(array(JPATH_BASE.'/tests/unit/suite/libraries/joomla/html/htmltests'));
		
		$this->assertThat(
			JHtml::_('mocktest.method1', 'argument1', 'argument2'),
			$this->equalTo('JHtml Mock Called')
		);

		$this->assertThat(
			JHtmlMockTest::$arguments[0],
			$this->equalTo(array('argument1', 'argument2'))
		);
		JHtmlMockTest::$arguments = array();

		$this->saveErrorHandlers();
		$mock1 = $this->getMock('errorCallback', array('error1', 'error2', 'error3'));

		JError::setErrorHandling(E_ERROR, 'callback', array($mock1, 'error1'));

		$mock1->expects($this->once())
			->method('error1');

		// we ensure that we get an error if we can find the file but the file does not contain the class
		$this->assertThat(
			JHtml::_('mocktest2.function1'),
			$this->isFalse()
		);

		JError::setErrorHandling(E_ERROR, 'callback', array($mock1, 'error2'));

		$mock1->expects($this->once())
			->method('error2');

		// we ensure that we get an error if we can't find the file
		$this->assertThat(
			JHtml::_('mocktestnotthere.function1'),
			$this->isFalse()
		);

		JError::setErrorHandling(E_ERROR, 'callback', array($mock1, 'error3'));

		$mock1->expects($this->once())
			->method('error3');

		// we ensure that we get an error if we have the class but not the method
		$this->assertThat(
			JHtml::_('mocktest.nomethod'),
			$this->isFalse()
		);

		// restore our error handlers
		$this->setErrorHandlers($this->savedErrorState);
	}

	/**
	 * @todo Implement testRegister().
	 */
	public function testRegister()
	{
		$registered = $this->getMock('MyHtmlClass', array('mockFunction'));

		// test that we can register the method
		$this->assertThat(
			JHtml::register('prefix.file.testfunction', array($registered, 'mockFunction')),
			$this->isTrue(),
			'Function registers properly'
		);

		// test that calling _ actually calls the function
		$registered->expects($this->once())
			->method('mockFunction');

		JHtml::_('prefix.file.testfunction');

		$this->assertThat(
			JHtml::register('prefix.file.missingtestfunction', array($registered, 'missingFunction')),
			$this->isFalse(),
			'If function is missing, we do not register'
		);		
		JHtml::unregister('prefix.file.testfunction');
		JHtml::unregister('prefix.file.missingtestfunction');
	}


	/**
	 * @todo Implement testUnregister().
	 */
	public function testUnregister()
	{
		$registered = $this->getMock('MyHtmlClass', array('mockFunction'));

		// test that we can register the method
		JHtml::register('prefix.file.testfunction', array($registered, 'mockFunction'));

		$this->assertThat(
			JHtml::unregister('prefix.file.testfunction'),
			$this->isTrue(),
			'Function did not unregister'
		);		

		$this->assertThat(
			JHtml::unregister('prefix.file.testkeynotthere'),
			$this->isFalse(),
			'Unregister return true when it should have failed'
		);		



	}

	/**
	 * @todo Implement testCore().
	 */
	public function testCore()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	public function linkData() {
		return array(
			array(
				'http://www.example.com',
				'Link Text',
				'title="My Link Title"',
				'<a href="http://www.example.com" title="My Link Title">Link Text</a>',
				'Standard link with string attribs failed'
			),
			array(
				'http://www.example.com',
				'Link Text',
				array('title' => 'My Link Title'),
				'<a href="http://www.example.com" title="My Link Title">Link Text</a>',
				'Standard link with array attribs failed'
			)

		);
	} 

	/**
	 * @todo Implement testLink().
	 * @dataProvider linkData
	 */
	public function testLink($url, $text, $attribs, $expected, $msg = '')
	{
		$this->assertThat(
			JHtml::link($url, $text, $attribs),
			$this->equalTo($expected),
			$msg
		);
	}

	/**
	 * @todo Implement testImage().
	 */
	public function testImage()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	public function iframeData() {
		return array(
			array(
				'http://www.example.com',
				'Link Text',
				'title="My Link Title"',
				'',
				'<iframe src="http://www.example.com" title="My Link Title" name="Link Text"></iframe>',
				'Iframe with text attribs, no noframes text failed'
			),
			array(
				'http://www.example.com',
				'Link Text',
				array('title' => 'My Link Title'),
				'',
				'<iframe src="http://www.example.com" title="My Link Title" name="Link Text"></iframe>',
				'Iframe with array attribs failed'
			)

		);
	} 


	/**
	 * @todo Implement testIframe().
	 * @dataProvider iframeData
	 */
	public function testIframe($url, $name, $attribs, $noFrames, $expected, $msg = '')
	{
		$this->assertThat(
			JHtml::iframe($url, $name, $attribs, $noFrames),
			$this->equalTo($expected),
			$msg
		);
	}

	/**
	 * @todo Implement testScript().
	 */
	public function testScript()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testSetFormatOptions().
	 */
	public function testSetFormatOptions()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testStylesheet().
	 */
	public function testStylesheet()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testDate().
	 */
	public function testDate()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testTooltip().
	 */
	public function testTooltip()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testCalendar().
	 */
	public function testCalendar()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testAddIncludePath().
	 */
	public function testAddIncludePath()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}
}
?>
