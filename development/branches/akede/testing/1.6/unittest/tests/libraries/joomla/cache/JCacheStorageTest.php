<?php
/**
 * JCacheStorageTest.php -- the test suite for JCacheStorage
 *
 * @version		$Id$
 * @package    Joomla.UnitTest
 * @copyright	Copyright (C) 2005 - 2009 Open Source Matters. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 */
/**
 * Test class for JCacheStorage.
 * Generated by PHPUnit on 2009-10-08 at 21:40:53.
 *
 * @package    Joomla.UnitTest
 * @subpackage Cache
 *
 */
class JCacheStorageTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var    JCacheStorage
	 * @access protected
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 *
	 * @return void
	 * @access protected
	 */
	protected function setUp()
	{
		include_once JPATH_BASE.'/libraries/joomla/cache/storage.php';
		$this->object = new JCacheStorage;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 *
	 * @return void
	 * @access protected
	 */
	protected function tearDown()
	{
	}

	/**
	 * Test Cases for getInstance
	 *
	 * @return array
	 */
	function casesGetInstance()
	{
		return array(
			'defaultapc' => array(
				'apc',
				array(
					'application'	=> null,
					'language'		=> 'en-GB',
					'locking'		=> true,
					'lifetime'		=> null,
					'now'		=> time(),
				),
				'JCacheStorageApc',
			),
			'defaulteaccelerator' => array(
				'eaccelerator',
				array(
					'application'	=> null,
					'language'		=> 'en-GB',
					'locking'		=> true,
					'lifetime'		=> null,
					'now'		=> time(),
				),
				'JCacheStorageEaccelerator',
 			),
			'defaultfile' => array(
				'file',
				array(
					'application'	=> null,
					'language'		=> 'en-GB',
					'locking'		=> true,
					'lifetime'		=> null,
					'cachebase'		=> JPATH_BASE.'/cache',
					'now'		=> time(),
				),
				'JCacheStorageFile',
			),
// 			'defaultmemcache' => array(
// 				'memcache',
// 				array(
// 					'application'	=> null,
// 					'language'		=> 'en-GB',
// 					'locking'		=> true,
// 					'lifetime'		=> null,
// 					'now'		=> time(),
// 				),
// 				'JCacheMemcache',
// 			),
			'defaultxcache' => array(
				'xcache',
				array(
					'application'	=> null,
					'language'		=> 'en-GB',
					'locking'		=> true,
					'lifetime'		=> null,
					'now'		=> time(),
				),
				'JCacheStorageXCache',
			),
		);
	}

	/**
	 * Testing getInstance
	 *
	 * @param	string	cache storage
	 * @param	array	options for cache storage
	 * @param	string	name of expected cache storage class
	 *
	 * @return void
	 * @dataProvider casesGetInstance
	 */
	public function testGetInstance( $handler, $options, $expClass)
	{
		$this->object = JCacheStorage::getInstance($handler, $options);
		$this->assertThat(
			$this->object,
			$this->isInstanceOf($expClass)
		);
		$this->assertThat(
			$this->object->_application,
			$this->equalTo($options['application'])
		);
		$this->assertThat(
			$this->object->_language,
			$this->equalTo($options['language'])
		);
		$this->assertThat(
			$this->object->_locking,
			$this->equalTo($options['locking'])
		);
		$this->assertThat(
			$this->object->_lifetime,
			$this->equalTo(empty($options['lifetime']) ? 60 : $options['lifetime'])
		);
		$this->assertLessThan(
			15,
			abs($this->object->_now - time())
		);
	}

	/**
	 * Testing get().
	 *
	 * @return void
	 */
	public function testGet()
	{
		$this->assertThat(
			$this->object->get(1, '', time()),
			$this->isNull()
		);
	}

	/**
	 * Testing store().
	 *
	 * @return void
	 */
	public function testStore()
	{
		$this->assertThat(
			$this->object->store(1, '', 'Cached'),
			$this->isTrue()
		);
	}

	/**
	 * Testing remove().
	 *
	 * @return void
	 */
	public function testRemove()
	{
		$this->assertThat(
			$this->object->remove(1, ''),
			$this->isTrue()
		);
	}

	/**
	 * Testing clean().
	 *
	 * @return void
	 */
	public function testClean()
	{
		$this->assertThat(
			$this->object->clean('', 'group'),
			$this->isTrue()
		);
	}

	/**
	 * Testing gc().
	 *
	 * @return void
	 */
	public function testGc()
	{
		$this->assertThat(
			$this->object->gc(),
			$this->isTrue()
		);
	}

	/**
	 * Testing test().
	 *
	 * @return void
	 */
	public function testTest()
	{
		$this->assertThat(
			$this->object->test(),
			$this->isTrue()
		);
	}
}
?>
