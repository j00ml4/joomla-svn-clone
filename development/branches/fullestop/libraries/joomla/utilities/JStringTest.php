<?php
require_once 'PHPUnit/Framework.php';

require_once JPATH_BASE. DS . 'libraries' . DS . 'joomla' . DS . 'utilities' . DS . 'string.php';
require_once 'JString-helper-dataset.php';

/**
 * Test class for JString.
 * Generated by PHPUnit on 2009-10-26 at 22:29:34.
 */
class JStringTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var JString
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
//        $this->object = new JString;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

	static public function strposData() {
		return JStringTest_DataSet::$strposTests;
	}

	static public function strrposData() {
		return JStringTest_DataSet::$strrposTests;
	}

	static public function substrData() {
		return JStringTest_DataSet::$substrTests;
	}

	static public function strtolowerData() {
		return JStringTest_DataSet::$strtolowerTests;
	}

	static public function strtoupperData() {
		return JStringTest_DataSet::$strtoupperTests;
	}

	static public function strlenData() {
		return JStringTest_DataSet::$strlenTests;
	}
	
	static public function strIreplaceData () {
		return JStringTest_DataSet::$strIreplaceTests;
	}

	static public function substr_replaceData() {
		return JStringTest_DataSet::$substrReplaceTests;
	}
	
	static public function StrsplitData() {
		return JStringTest_DataSet::$StrsplitTests;
	}
	
	static public function StrcasecmpData() {
		return JStringTest_DataSet::$StrcasecmpTests;
	}
	
	static public function StrcspnData() {
		return JStringTest_DataSet::$StrcspnTests;
	}
	
	static public function StristrData() {
		return JStringTest_DataSet::$StristrTests;
	}
	
	static public function StrrevData() {
		return JStringTest_DataSet::$StrrevTests;
	}
	
	static public function StrspnData() {
		return JStringTest_DataSet::$StrspnTests;
	}
	
	static public function LtrimData() {
		return JStringTest_DataSet::$LtrimTests;
	}
	
	static public function RtrimData() {
		return JStringTest_DataSet::$RtrimTests;
	}
	
	static public function TrimData() {
		return JStringTest_DataSet::$TrimTests;
	}
	
	static public function UcfirstData() {
		return JStringTest_DataSet::$UcfirstTests;
	}
	
	static public function UcwordsData() {
		return JStringTest_DataSet::$UcwordsTests;
	}
	
	/**
	 * @dataProvider strposData
	 */
    public function testStrpos($haystack, $needle, $offset = 0, $expect)
    {
		$actual = JString::strpos($haystack, $needle, $offset);
		$this->assertEquals($expect, $actual);
    }

	/**
	 * @dataProvider strrposData
	 */
    public function testStrrpos($haystack, $needle, $offset = 0, $expect)
    {
		$actual = JString::strrpos($haystack, $needle, $offset);
		$this->assertEquals($expect, $actual);
    }


	/**
	 * @dataProvider substrData
	 */
    public function testSubstr($string, $start, $length = false, $expect)
    {
		$actual = JString::substr($string, $start, $length);
		$this->assertEquals($expect, $actual);
    }

	/**
	 * @dataProvider strtolowerData
	 */
    public function testStrtolower($string, $expect)
    {
		$actual = JString::strtolower($string);
		$this->assertEquals($expect, $actual);
    }

    /**
	 * @dataProvider strtoupperData
     */
    public function testStrtoupper($string, $expect)
    {
		$actual = JString::strtoupper($string);
		$this->assertEquals($expect, $actual);
    }

	/**
	 * @dataProvider strlenData
	 */
    public function testStrlen($string, $expect)
    {
		$actual = JString::strlen($string);
		$this->assertEquals($expect, $actual);
    }

   /**
     * @dataProvider strIreplaceData
     */
     public function testStr_ireplace($find, $replace, $str, $expect)
    {
		  $actual = JString::str_ireplace($find, $replace, $str);
		  $this->assertEquals($expect, $actual);
    }

     /**
     * @dataProvider StrsplitData
     */
   public function testStr_split($string, $length, $expect)
    {
        $actual = JString::str_split($string, $length);
		$this->assertEquals($expect, $actual);
    }

    /**
     * @dataProvider StrcasecmpData
     */
    public function testStrcasecmp($string1, $string2, $expect)
    {
       $actual = JString::strcasecmp($string1, $string2);
	  $this->assertEquals($expect, $actual);
    }

    /**
     * @dataProvider StrcspnData
     */
     public function testStrcspn($string, $char, $start, $length, $expect)
    {
        $actual = JString::Strcspn($string, $char, $start, $length);
		
		$this->assertEquals($expect, $actual);
       
    }

     /**
     * @dataProvider StristrData
     */
    public function testStristr($string, $search, $expect)
    {
        $actual = JString::Stristr($string, $search);
		$this->assertEquals($expect, $actual);
    }

    /**
     * @dataProvider StrrevData
     */
    public function testStrrev($string, $expect)
    {
       $actual = JString::Strrev($string);
	   $this->assertEquals($expect, $actual);
    }

     /**
     * @dataProvider StrspnData
     */
    public function testStrspn($string, $charlist, $start, $length, $expect)
    {
        $actual = JString::strspn($string, $charlist, $start, $length);
		$this->assertEquals($expect, $actual);
    }


   /**
     *@dataProvider substr_replaceData
     */
    public function testSubstr_replace($string, $repalcestring, $start, $expect)
    {
       	
		$actual = JString::substr_replace($string, $repalcestring, $start);
		$this->assertEquals($expect, $actual);
    }

    /**
     * @dataProvider LtrimData
     */
    public function testLtrim($string, $charlist, $expect)
    {
       $actual = JString::ltrim($string, $charlist);
	   $this->assertEquals($expect, $actual);
    }

    /**
     * @dataProvider RtrimData
     */
    public function testRtrim($string, $charlist, $expect)
    {
       $actual = JString::rtrim($string, $charlist);
	   $this->assertEquals($expect, $actual);
    }

     /**
     * @dataProvider TrimData
     */
    public function testTrim($string, $charlist, $expect)
    {
       $actual = JString::trim($string, $charlist);
	   
	   $this->assertEquals($expect, $actual);
    }


    /**
     * @dataProvider UcfirstData
     */
    public function testUcfirst($string, $expect)
    {
        $actual = JString::ucfirst($string);
		$this->assertEquals($expect, $actual);
    }

     /**
     * @dataProvider UcwordsData
     */
    public function testUcwords($string, $expect)
    {
        $actual = JString::ucwords($string);
		$this->assertEquals($expect, $actual);
    }

    /**
     * @todo Implement testUcwords_callback().
     */
    public function testUcwords_callback()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTranscode().
     */
    public function testTranscode()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testValid().
     */
    public function testValid()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCompliant().
     */
   /**
     * @dataProvider compliantData
     */
    public function testCompliant($str, $expect)
    {
         $actual = $this->object->compliant($str);
		 $this->assertEquals($expect, $actual);
    }
}
?>
